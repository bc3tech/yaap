/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Client;

using System.Collections.Generic;
using System.IO;
using System.Net;

using Common;

/// <summary>
/// A container for generalized request inputs. This type allows consumers to extend the request functionality
/// by abstracting away from the default (built-in) request framework (e.g. RestSharp).
/// </summary>
public class RequestOptions
{
    /// <summary>
    /// Parameters to be bound to path parts of the Request's URL
    /// </summary>
    public IDictionary<string, string> PathParameters { get; set; } = new Dictionary<string, string>();

    /// <summary>
    /// Query parameters to be applied to the request.
    /// Keys may have 1 or more values associated.
    /// </summary>
    public Multimap<string, string> QueryParameters { get; set; }

    /// <summary>
    /// Header parameters to be applied to to the request.
    /// Keys may have 1 or more values associated.
    /// </summary>
    public Multimap<string, string> HeaderParameters { get; set; }

    /// <summary>
    /// Form parameters to be sent along with the request.
    /// </summary>
    public IDictionary<string, string>? FormParameters { get; set; }

    /// <summary>
    /// File parameters to be sent along with the request.
    /// </summary>
    public IDictionary<string, Stream>? FileParameters { get; set; }

    /// <summary>
    /// Cookies to be sent along with the request.
    /// </summary>
    public IList<Cookie>? Cookies { get; set; }

    /// <summary>
    /// Any data associated with a request body.
    /// </summary>
    public object? Data { get; set; }

    /// <summary>
    /// Constructs a new instance of <see cref="RequestOptions"/>
    /// </summary>
    public RequestOptions()
    {
        this.PathParameters = new Dictionary<string, string>();
        this.QueryParameters = [];
        this.HeaderParameters = [];
        this.FormParameters = new Dictionary<string, string>();
        this.FileParameters = new Dictionary<string, Stream>();
        this.Cookies = [];
    }
}