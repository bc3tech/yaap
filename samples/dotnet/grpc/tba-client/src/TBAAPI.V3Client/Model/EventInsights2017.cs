/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// Insights for FIRST STEAMWORKS qualification and elimination matches.
/// </summary>
[DataContract]
public partial record EventInsights2017 : IValidatableObject
{
    /// <summary>
    /// Average foul score.
    /// </summary>
    /// <value>Average foul score.</value>
    [DataMember(Name = "average_foul_score", EmitDefaultValue = false), JsonPropertyName("average_foul_score")]
    public float AverageFoulScore { get; set; }

    /// <summary>
    /// Average fuel points scored.
    /// </summary>
    /// <value>Average fuel points scored.</value>
    [DataMember(Name = "average_fuel_points", EmitDefaultValue = false), JsonPropertyName("average_fuel_points")]
    public float AverageFuelPoints { get; set; }

    /// <summary>
    /// Average fuel points scored during auto.
    /// </summary>
    /// <value>Average fuel points scored during auto.</value>
    [DataMember(Name = "average_fuel_points_auto", EmitDefaultValue = false), JsonPropertyName("average_fuel_points_auto")]
    public float AverageFuelPointsAuto { get; set; }

    /// <summary>
    /// Average fuel points scored during teleop.
    /// </summary>
    /// <value>Average fuel points scored during teleop.</value>
    [DataMember(Name = "average_fuel_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_fuel_points_teleop")]
    public float AverageFuelPointsTeleop { get; set; }

    /// <summary>
    /// Average points scored in the high goal.
    /// </summary>
    /// <value>Average points scored in the high goal.</value>
    [DataMember(Name = "average_high_goals", EmitDefaultValue = false), JsonPropertyName("average_high_goals")]
    public float AverageHighGoals { get; set; }

    /// <summary>
    /// Average points scored in the high goal during auto.
    /// </summary>
    /// <value>Average points scored in the high goal during auto.</value>
    [DataMember(Name = "average_high_goals_auto", EmitDefaultValue = false), JsonPropertyName("average_high_goals_auto")]
    public float AverageHighGoalsAuto { get; set; }

    /// <summary>
    /// Average points scored in the high goal during teleop.
    /// </summary>
    /// <value>Average points scored in the high goal during teleop.</value>
    [DataMember(Name = "average_high_goals_teleop", EmitDefaultValue = false), JsonPropertyName("average_high_goals_teleop")]
    public float AverageHighGoalsTeleop { get; set; }

    /// <summary>
    /// Average points scored in the low goal.
    /// </summary>
    /// <value>Average points scored in the low goal.</value>
    [DataMember(Name = "average_low_goals", EmitDefaultValue = false), JsonPropertyName("average_low_goals")]
    public float AverageLowGoals { get; set; }

    /// <summary>
    /// Average points scored in the low goal during auto.
    /// </summary>
    /// <value>Average points scored in the low goal during auto.</value>
    [DataMember(Name = "average_low_goals_auto", EmitDefaultValue = false), JsonPropertyName("average_low_goals_auto")]
    public float AverageLowGoalsAuto { get; set; }

    /// <summary>
    /// Average points scored in the low goal during teleop.
    /// </summary>
    /// <value>Average points scored in the low goal during teleop.</value>
    [DataMember(Name = "average_low_goals_teleop", EmitDefaultValue = false), JsonPropertyName("average_low_goals_teleop")]
    public float AverageLowGoalsTeleop { get; set; }

    /// <summary>
    /// Average mobility points scored during auto.
    /// </summary>
    /// <value>Average mobility points scored during auto.</value>
    [DataMember(Name = "average_mobility_points_auto", EmitDefaultValue = false), JsonPropertyName("average_mobility_points_auto")]
    public float AverageMobilityPointsAuto { get; set; }

    /// <summary>
    /// Average points scored during auto.
    /// </summary>
    /// <value>Average points scored during auto.</value>
    [DataMember(Name = "average_points_auto", EmitDefaultValue = false), JsonPropertyName("average_points_auto")]
    public float AveragePointsAuto { get; set; }

    /// <summary>
    /// Average points scored during teleop.
    /// </summary>
    /// <value>Average points scored during teleop.</value>
    [DataMember(Name = "average_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_points_teleop")]
    public float AveragePointsTeleop { get; set; }

    /// <summary>
    /// Average rotor points scored.
    /// </summary>
    /// <value>Average rotor points scored.</value>
    [DataMember(Name = "average_rotor_points", EmitDefaultValue = false), JsonPropertyName("average_rotor_points")]
    public float AverageRotorPoints { get; set; }

    /// <summary>
    /// Average rotor points scored during auto.
    /// </summary>
    /// <value>Average rotor points scored during auto.</value>
    [DataMember(Name = "average_rotor_points_auto", EmitDefaultValue = false), JsonPropertyName("average_rotor_points_auto")]
    public float AverageRotorPointsAuto { get; set; }

    /// <summary>
    /// Average rotor points scored during teleop.
    /// </summary>
    /// <value>Average rotor points scored during teleop.</value>
    [DataMember(Name = "average_rotor_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_rotor_points_teleop")]
    public float AverageRotorPointsTeleop { get; set; }

    /// <summary>
    /// Average score.
    /// </summary>
    /// <value>Average score.</value>
    [DataMember(Name = "average_score", EmitDefaultValue = false), JsonPropertyName("average_score")]
    public float AverageScore { get; set; }

    /// <summary>
    /// Average takeoff points scored during teleop.
    /// </summary>
    /// <value>Average takeoff points scored during teleop.</value>
    [DataMember(Name = "average_takeoff_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_takeoff_points_teleop")]
    public float AverageTakeoffPointsTeleop { get; set; }

    /// <summary>
    /// Average margin of victory.
    /// </summary>
    /// <value>Average margin of victory.</value>
    [DataMember(Name = "average_win_margin", EmitDefaultValue = false), JsonPropertyName("average_win_margin")]
    public float AverageWinMargin { get; set; }

    /// <summary>
    /// Average winning score.
    /// </summary>
    /// <value>Average winning score.</value>
    [DataMember(Name = "average_win_score", EmitDefaultValue = false), JsonPropertyName("average_win_score")]
    public float AverageWinScore { get; set; }

    /// <summary>
    /// An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
    /// </summary>
    /// <value>An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match</value>
    [DataMember(Name = "high_kpa", EmitDefaultValue = false), JsonPropertyName("high_kpa")]
    public IList<string>? HighKpa { get; set; }

    /// <summary>
    /// An array with three values, high score, match key from the match with the high score, and the name of the match
    /// </summary>
    /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
    [DataMember(Name = "high_score", EmitDefaultValue = false), JsonPropertyName("high_score")]
    public IList<string>? HighScore { get; set; }

    /// <summary>
    /// An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.</value>
    [DataMember(Name = "kpa_achieved", EmitDefaultValue = false), JsonPropertyName("kpa_achieved")]
    public IList<float>? KpaAchieved { get; set; }

    /// <summary>
    /// An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.</value>
    [DataMember(Name = "mobility_counts", EmitDefaultValue = false), JsonPropertyName("mobility_counts")]
    public IList<float>? MobilityCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.</value>
    [DataMember(Name = "rotor_1_engaged", EmitDefaultValue = false), JsonPropertyName("rotor_1_engaged")]
    public IList<float>? Rotor1Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
    [DataMember(Name = "rotor_1_engaged_auto", EmitDefaultValue = false), JsonPropertyName("rotor_1_engaged_auto")]
    public IList<float>? Rotor1EngagedAuto { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.</value>
    [DataMember(Name = "rotor_2_engaged", EmitDefaultValue = false), JsonPropertyName("rotor_2_engaged")]
    public IList<float>? Rotor2Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
    [DataMember(Name = "rotor_2_engaged_auto", EmitDefaultValue = false), JsonPropertyName("rotor_2_engaged_auto")]
    public IList<float>? Rotor2EngagedAuto { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.</value>
    [DataMember(Name = "rotor_3_engaged", EmitDefaultValue = false), JsonPropertyName("rotor_3_engaged")]
    public IList<float>? Rotor3Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.</value>
    [DataMember(Name = "rotor_4_engaged", EmitDefaultValue = false), JsonPropertyName("rotor_4_engaged")]
    public IList<float>? Rotor4Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.</value>
    [DataMember(Name = "takeoff_counts", EmitDefaultValue = false), JsonPropertyName("takeoff_counts")]
    public IList<float>? TakeoffCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.</value>
    [DataMember(Name = "unicorn_matches", EmitDefaultValue = false), JsonPropertyName("unicorn_matches")]
    public IList<float>? UnicornMatches { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class EventInsights2017 {\n");
        sb.Append("  AverageFoulScore: ").Append(this.AverageFoulScore).Append('\n');
        sb.Append("  AverageFuelPoints: ").Append(this.AverageFuelPoints).Append('\n');
        sb.Append("  AverageFuelPointsAuto: ").Append(this.AverageFuelPointsAuto).Append('\n');
        sb.Append("  AverageFuelPointsTeleop: ").Append(this.AverageFuelPointsTeleop).Append('\n');
        sb.Append("  AverageHighGoals: ").Append(this.AverageHighGoals).Append('\n');
        sb.Append("  AverageHighGoalsAuto: ").Append(this.AverageHighGoalsAuto).Append('\n');
        sb.Append("  AverageHighGoalsTeleop: ").Append(this.AverageHighGoalsTeleop).Append('\n');
        sb.Append("  AverageLowGoals: ").Append(this.AverageLowGoals).Append('\n');
        sb.Append("  AverageLowGoalsAuto: ").Append(this.AverageLowGoalsAuto).Append('\n');
        sb.Append("  AverageLowGoalsTeleop: ").Append(this.AverageLowGoalsTeleop).Append('\n');
        sb.Append("  AverageMobilityPointsAuto: ").Append(this.AverageMobilityPointsAuto).Append('\n');
        sb.Append("  AveragePointsAuto: ").Append(this.AveragePointsAuto).Append('\n');
        sb.Append("  AveragePointsTeleop: ").Append(this.AveragePointsTeleop).Append('\n');
        sb.Append("  AverageRotorPoints: ").Append(this.AverageRotorPoints).Append('\n');
        sb.Append("  AverageRotorPointsAuto: ").Append(this.AverageRotorPointsAuto).Append('\n');
        sb.Append("  AverageRotorPointsTeleop: ").Append(this.AverageRotorPointsTeleop).Append('\n');
        sb.Append("  AverageScore: ").Append(this.AverageScore).Append('\n');
        sb.Append("  AverageTakeoffPointsTeleop: ").Append(this.AverageTakeoffPointsTeleop).Append('\n');
        sb.Append("  AverageWinMargin: ").Append(this.AverageWinMargin).Append('\n');
        sb.Append("  AverageWinScore: ").Append(this.AverageWinScore).Append('\n');
        sb.Append("  HighKpa: ").Append(this.HighKpa).Append('\n');
        sb.Append("  HighScore: ").Append(this.HighScore).Append('\n');
        sb.Append("  KpaAchieved: ").Append(this.KpaAchieved).Append('\n');
        sb.Append("  MobilityCounts: ").Append(this.MobilityCounts).Append('\n');
        sb.Append("  Rotor1Engaged: ").Append(this.Rotor1Engaged).Append('\n');
        sb.Append("  Rotor1EngagedAuto: ").Append(this.Rotor1EngagedAuto).Append('\n');
        sb.Append("  Rotor2Engaged: ").Append(this.Rotor2Engaged).Append('\n');
        sb.Append("  Rotor2EngagedAuto: ").Append(this.Rotor2EngagedAuto).Append('\n');
        sb.Append("  Rotor3Engaged: ").Append(this.Rotor3Engaged).Append('\n');
        sb.Append("  Rotor4Engaged: ").Append(this.Rotor4Engaged).Append('\n');
        sb.Append("  TakeoffCounts: ").Append(this.TakeoffCounts).Append('\n');
        sb.Append("  UnicornMatches: ").Append(this.UnicornMatches).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.AverageFoulScore.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageFuelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageFuelPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageFuelPointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageHighGoals.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageHighGoalsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageHighGoalsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageLowGoals.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageLowGoalsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageLowGoalsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageMobilityPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AveragePointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AveragePointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageRotorPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageRotorPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageRotorPointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageScore.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageTakeoffPointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageWinMargin.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageWinScore.GetHashCode();
            if (this.HighKpa is not null)
            {
                hashCode = (hashCode * 59) + this.HighKpa.GetHashCode();
            }

            if (this.HighScore is not null)
            {
                hashCode = (hashCode * 59) + this.HighScore.GetHashCode();
            }

            if (this.KpaAchieved is not null)
            {
                hashCode = (hashCode * 59) + this.KpaAchieved.GetHashCode();
            }

            if (this.MobilityCounts is not null)
            {
                hashCode = (hashCode * 59) + this.MobilityCounts.GetHashCode();
            }

            if (this.Rotor1Engaged is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor1Engaged.GetHashCode();
            }

            if (this.Rotor1EngagedAuto is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor1EngagedAuto.GetHashCode();
            }

            if (this.Rotor2Engaged is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor2Engaged.GetHashCode();
            }

            if (this.Rotor2EngagedAuto is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor2EngagedAuto.GetHashCode();
            }

            if (this.Rotor3Engaged is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor3Engaged.GetHashCode();
            }

            if (this.Rotor4Engaged is not null)
            {
                hashCode = (hashCode * 59) + this.Rotor4Engaged.GetHashCode();
            }

            if (this.TakeoffCounts is not null)
            {
                hashCode = (hashCode * 59) + this.TakeoffCounts.GetHashCode();
            }

            if (this.UnicornMatches is not null)
            {
                hashCode = (hashCode * 59) + this.UnicornMatches.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
