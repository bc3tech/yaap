/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api;

using System;
using System.Collections.Generic;
using System.ComponentModel;

using Microsoft.SemanticKernel;

using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class MatchApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class.
    /// </summary>
    /// <returns></returns>
    public MatchApi(string basePath)
    {
        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public MatchApi(Configuration configuration)
    {
        ArgumentNullException.ThrowIfNull(configuration);

        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public MatchApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(asyncClient);
        ArgumentNullException.ThrowIfNull(configuration);

        this.Client = client;
        this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => this.Configuration.BasePath;

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get => _exceptionFactory.GetInvocationList().Length > 1
                ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
                : _exceptionFactory;
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventMatchTimeseries(string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchTimeseriesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo(string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetEventMatchTimeseriesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchTimeseriesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/timeseries", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetEventMatches(string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetEventMatchesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetEventMatchesWithHttpInfo(string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a detailed list of matches for the given event.")]
    [return: Description("List of Match values, possibly null")]
    public async Task<List<Match>?> GetEventMatchesDetailedAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetEventMatchesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/event/{event_key}/matches", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventMatchesKeys(string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventMatchesKeysWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo(string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of match keys for the given event.")]
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetEventMatchesKeysAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventMatchesKeysAsyncWithHttpInfoAsync(eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    public IList<MatchSimple>? GetEventMatchesSimple(string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = GetEventMatchesSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    public ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo(string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<MatchSimple>> localVarResponse = this.Client.Get<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    [KernelFunction, Description("Gets a list of matches for the given event.")]
    [return: Description("List of MatchSimple values, possibly null")]
    public async Task<List<MatchSimple>?> GetEventMatchesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = await GetEventMatchesSimpleAsyncWithHttpInfoAsync(eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    [return: Description("Task of ApiResponse (List<MatchSimple>)")]
    public async Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
             string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<MatchSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Match</returns>
    public Match? GetMatch(string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<Match> localVarResponse = GetMatchWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Match</returns>
    public ApiResponse<Match> GetMatchWithHttpInfo(string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatch");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Match> localVarResponse = this.Client.Get<Match>("/match/{match_key}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatch", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Match</returns>
    [KernelFunction, Description("Gets a detailed 'Match' object for the given match key.")]
    [return: Description("Task of Match")]
    public async Task<Match?> GetMatchDetailedAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<Match> localVarResponse = await GetMatchAsyncWithHttpInfoAsync(matchKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Match)</returns>
    [return: Description("Task of ApiResponse (Match)")]
    public async Task<ApiResponse<Match>> GetMatchAsyncWithHttpInfoAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatch");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Match> localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/match/{match_key}", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatch", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>MatchSimple</returns>
    public MatchSimple? GetMatchSimple(string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<MatchSimple> localVarResponse = GetMatchSimpleWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of MatchSimple</returns>
    public ApiResponse<MatchSimple> GetMatchSimpleWithHttpInfo(string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<MatchSimple> localVarResponse = this.Client.Get<MatchSimple>("/match/{match_key}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of MatchSimple</returns>
    [KernelFunction, Description("Gets a 'Match' object for the given match key.")]
    [return: Description("Task of MatchSimple")]
    public async Task<MatchSimple?> GetMatchAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<MatchSimple> localVarResponse = await GetMatchSimpleAsyncWithHttpInfoAsync(matchKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form 'Match' object for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (MatchSimple)</returns>
    [return: Description("Task of ApiResponse (MatchSimple)")]
    public async Task<ApiResponse<MatchSimple>> GetMatchSimpleAsyncWithHttpInfoAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<MatchSimple> localVarResponse = await this.AsynchronousClient.GetAsync<MatchSimple>("/match/{match_key}/simple", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Object&gt;</returns>
    public IList<object>? GetMatchTimeseries(string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<object>> localVarResponse = GetMatchTimeseriesWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Object&gt;</returns>
    public ApiResponse<List<object>> GetMatchTimeseriesWithHttpInfo(string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<object>> localVarResponse = this.Client.Get<List<object>>("/match/{match_key}/timeseries", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Object&gt;</returns>
    //[KernelFunction, Description("Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.")]
    [return: Description("List of Object values, possibly null")]
    public async Task<List<object>?> GetMatchTimeseriesAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<object>> localVarResponse = await GetMatchTimeseriesAsyncWithHttpInfoAsync(matchKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
    [return: Description("Task of ApiResponse (List<Object>)")]
    public async Task<ApiResponse<List<object>>> GetMatchTimeseriesAsyncWithHttpInfoAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchTimeseries");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<object>> localVarResponse = await this.AsynchronousClient.GetAsync<List<object>>("/match/{match_key}/timeseries", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchTimeseries", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Zebra</returns>
    public Zebra? GetMatchZebra(string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<Zebra> localVarResponse = GetMatchZebraWithHttpInfo(matchKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Zebra</returns>
    public ApiResponse<Zebra> GetMatchZebraWithHttpInfo(string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchZebra");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Zebra> localVarResponse = this.Client.Get<Zebra>("/match/{match_key}/zebra_motionworks", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchZebra", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Zebra</returns>
    //[KernelFunction, Description("Gets Zebra MotionWorks data for a Match for the given match key.")]
    [return: Description("Task of Zebra")]
    public async Task<Zebra?> GetMatchZebraAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<Zebra> localVarResponse = await GetMatchZebraAsyncWithHttpInfoAsync(matchKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets Zebra MotionWorks data for a Match for the given match key.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="matchKey">TBA Match Key, eg '2016nytr_qm1'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Zebra)</returns>
    [return: Description("Task of ApiResponse (Zebra)")]
    public async Task<ApiResponse<Zebra>> GetMatchZebraAsyncWithHttpInfoAsync(
        [Description("Match Key, eg '2016nytr_qm1'")] string matchKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'matchKey' is set
        if (matchKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'matchKey' when calling MatchApi->GetMatchZebra");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("match_key", matchKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Zebra> localVarResponse = await this.AsynchronousClient.GetAsync<Zebra>("/match/{match_key}/zebra_motionworks", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetMatchZebra", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetTeamEventMatches(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a detailed list of matches for the given team and event.")]
    [return: Description("List of Match values, possibly null")]
    public async Task<List<Match>?> GetTeamEventMatchesDetailedAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatches");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatches");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatches", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamEventMatchesKeys(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of match keys for matches for the given team and event.")]
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetTeamEventMatchesKeysAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/event/{event_key}/matches/keys", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetTeamEventMatchesSimple(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo(teamKey, eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo(string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a list of matches for the given team and event.")]
    [return: Description("List of Match values, possibly null")]
    public async Task<List<Match>?> GetTeamEventMatchesAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfoAsync(teamKey, eventKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, string eventKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling MatchApi->GetTeamEventMatchesSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/event/{event_key}/matches/simple", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Match&gt;</returns>
    public IList<Match>? GetTeamMatchesByYear(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = GetTeamMatchesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Match&gt;</returns>
    public ApiResponse<List<Match>> GetTeamMatchesByYearWithHttpInfo(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Match>> localVarResponse = this.Client.Get<List<Match>>("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Match&gt;</returns>
    [KernelFunction, Description("Gets a detailed list of matches for the given team and year.")]
    [return: Description("List of Match values, possibly null")]
    public async Task<List<Match>?> GetTeamMatchesByYearDetailedAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<Match>> localVarResponse = await GetTeamMatchesByYearAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
    [return: Description("Task of ApiResponse (List<Match>)")]
    public async Task<ApiResponse<List<Match>>> GetTeamMatchesByYearAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Match>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/team/{team_key}/matches/{year}", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamMatchesByYearKeys(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamMatchesByYearKeysWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamMatchesByYearKeysWithHttpInfo(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of match keys for matches for the given team and year.")]
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetTeamMatchesByYearKeysAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamMatchesByYearKeysAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of match keys for matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamMatchesByYearKeysAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/team/{team_key}/matches/{year}/keys", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;MatchSimple&gt;</returns>
    public IList<MatchSimple>? GetTeamMatchesByYearSimple(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = GetTeamMatchesByYearSimpleWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
    public ApiResponse<List<MatchSimple>> GetTeamMatchesByYearSimpleWithHttpInfo(string teamKey, int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<MatchSimple>> localVarResponse = this.Client.Get<List<MatchSimple>>("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;MatchSimple&gt;</returns>
    [KernelFunction, Description("Gets a list of matches for the given team and year.")]
    [return: Description("List of MatchSimple values, possibly null")]
    public async Task<List<MatchSimple>?> GetTeamMatchesByYearAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<MatchSimple>> localVarResponse = await GetTeamMatchesByYearSimpleAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of matches for the given team and year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
    [return: Description("Task of ApiResponse (List<MatchSimple>)")]
    public async Task<ApiResponse<List<MatchSimple>>> GetTeamMatchesByYearSimpleAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
        [Description("The year to limit the data search to")] int year,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling MatchApi->GetTeamMatchesByYearSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<MatchSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<MatchSimple>>("/team/{team_key}/matches/{year}/simple", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamMatchesByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
