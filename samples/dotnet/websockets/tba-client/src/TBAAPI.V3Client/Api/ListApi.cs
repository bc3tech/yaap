/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api;

using System;
using System.Collections.Generic;
using System.ComponentModel;

using Microsoft.SemanticKernel;

using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IListApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetDistrictEvents(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetDistrictEventsKeys(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetDistrictEventsSimple(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team district rankings for the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;DistrictRanking&gt;</returns>
    IList<DistrictRanking>? GetDistrictRankings(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team district rankings for the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
    ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    IList<Team>? GetDistrictTeams(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetDistrictTeamsKeys(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    IList<TeamSimple>? GetDistrictTeamsSimple(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    IList<Team>? GetEventTeams(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventTeamsKeys(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    IList<TeamSimple>? GetEventTeamsSimple(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    IDictionary<string, TeamEventStatus>? GetEventTeamsStatuses(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    IList<Event>? GetEventsByYear(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetEventsByYearKeys(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    IList<EventSimple>? GetEventsByYearSimple(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    IDictionary<string, TeamEventStatus>? GetTeamEventsStatusesByYear(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    IList<Team>? GetTeams(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    ApiResponse<List<Team>> GetTeamsWithHttpInfo(int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    IList<Team>? GetTeamsByYear(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    ApiResponse<List<Team>> GetTeamsByYearWithHttpInfo(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetTeamsByYearKeys(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamsByYearKeysWithHttpInfo(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    IList<TeamSimple>? GetTeamsByYearSimple(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    ApiResponse<List<TeamSimple>> GetTeamsByYearSimpleWithHttpInfo(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    IList<string>? GetTeamsKeys(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetTeamsKeysWithHttpInfo(int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    IList<TeamSimple>? GetTeamsSimple(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    ApiResponse<List<TeamSimple>> GetTeamsSimpleWithHttpInfo(int pageNum, string? ifModifiedSince = default);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IListApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetDistrictEventsAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetDistrictEventsKeysAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys for events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetDistrictEventsSimpleAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team district rankings for the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
    Task<List<DistrictRanking>> GetDistrictRankingsAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of team district rankings for the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
    Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    Task<List<Team>> GetDistrictTeamsAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetDistrictTeamsKeysAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync(string districtKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfoAsync(string districtKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    Task<List<Team>> GetEventTeamsAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventTeamsKeysAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' keys that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    Task<List<TeamSimple>> GetEventTeamsSimpleAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of 'Team' objects that competed in the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(string eventKey, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for teams competing at the given event.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfoAsync(string eventKey, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    Task<List<Event>> GetEventsByYearAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetEventsByYearKeysAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of event keys in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a short-form list of events in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfoAsync(int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(string teamKey, int year, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(string teamKey, int year, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    Task<List<Team>> GetTeamsAsync(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    Task<ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfoAsync(int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    Task<List<Team>> GetTeamsByYearAsync(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    Task<ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfoAsync(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetTeamsByYearKeysAsync(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfoAsync(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    Task<List<TeamSimple>> GetTeamsByYearSimpleAsync(int year, int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    Task<ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfoAsync(int year, int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetTeamsKeysAsync(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfoAsync(int pageNum, string? ifModifiedSince = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    Task<List<TeamSimple>> GetTeamsSimpleAsync(int pageNum, string? ifModifiedSince = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    Task<ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfoAsync(int pageNum, string? ifModifiedSince = default);
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IListApi : IListApiSync, IListApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ListApi : IListApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="ListApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ListApi(string basePath)
    {
        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ListApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public ListApi(Configuration configuration)
    {
        ArgumentNullException.ThrowIfNull(configuration);

        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ListApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public ListApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(asyncClient);
        ArgumentNullException.ThrowIfNull(configuration);

        this.Client = client;
        this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => this.Configuration.BasePath;

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get => _exceptionFactory.GetInvocationList().Length > 1
                ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
                : _exceptionFactory;
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetDistrictEvents(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetDistrictEventsWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of events in the given district.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetDistrictEventsAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of events in the given district.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEvents");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/district/{district_key}/events", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEvents", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetDistrictEventsKeys(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of event keys for events in the given district.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetDistrictEventsKeysAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of event keys for events in the given district.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetDistrictEventsSimple(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given district.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetDistrictEventsSimpleAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given district.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictEventsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/district/{district_key}/events/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;DistrictRanking&gt;</returns>
    public IList<DistrictRanking>? GetDistrictRankings(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictRanking>> localVarResponse = GetDistrictRankingsWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
    public ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<DistrictRanking>> localVarResponse = this.Client.Get<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
    [KernelFunction, Description("Gets a list of team district rankings for the given district.")]
    [return: Description("Task of List<DistrictRanking>")]
    public async Task<List<DistrictRanking>> GetDistrictRankingsAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictRanking>> localVarResponse = await GetDistrictRankingsAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
    [KernelFunction, Description("Gets a list of team district rankings for the given district.")]
    [return: Description("Task of ApiResponse (List<DistrictRanking>)")]
    public async Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<DistrictRanking>> localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    public IList<Team>? GetDistrictTeams(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = GetDistrictTeamsWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    public ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Team>> localVarResponse = this.Client.Get<List<Team>>("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of List<Team>")]
    public async Task<List<Team>> GetDistrictTeamsAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = await GetDistrictTeamsAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of ApiResponse (List<Team>)")]
    public async Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Team>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/district/{district_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetDistrictTeamsKeys(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetDistrictTeamsKeysWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetDistrictTeamsKeysAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetDistrictTeamsKeysAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    public IList<TeamSimple>? GetDistrictTeamsSimple(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = GetDistrictTeamsSimpleWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    public ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo(string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<TeamSimple>> localVarResponse = this.Client.Get<List<TeamSimple>>("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of List<TeamSimple>")]
    public async Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = await GetDistrictTeamsSimpleAsyncWithHttpInfoAsync(districtKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in events in the given district.")]
    [return: Description("Task of ApiResponse (List<TeamSimple>)")]
    public async Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling ListApi->GetDistrictTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<TeamSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/district/{district_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    public IList<Team>? GetEventTeams(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    public ApiResponse<List<Team>> GetEventTeamsWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Team>> localVarResponse = this.Client.Get<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of List<Team>")]
    public async Task<List<Team>> GetEventTeamsAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<Team>)")]
    public async Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeams");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Team>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/event/{event_key}/teams", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventTeamsKeys(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' keys that competed in the given event.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventTeamsKeysAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' keys that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' keys that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/event/{event_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    public IList<TeamSimple>? GetEventTeamsSimple(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    public ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<TeamSimple>> localVarResponse = this.Client.Get<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of List<TeamSimple>")]
    public async Task<List<TeamSimple>> GetEventTeamsSimpleAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of 'Team' objects that competed in the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of 'Team' objects that competed in the given event.")]
    [return: Description("Task of ApiResponse (List<TeamSimple>)")]
    public async Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsSimple");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<TeamSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/event/{event_key}/teams/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public IDictionary<string, TeamEventStatus>? GetEventTeamsStatuses(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo(eventKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo(string eventKey,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsStatuses");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for teams competing at the given event.")]
    [return: Description("Task of Dictionary<string, TeamEventStatus>")]
    public async Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfoAsync(eventKey, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for teams competing at the given event.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="eventKey">TBA Event Key, eg '2016nytr'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for teams competing at the given event.")]
    [return: Description("Task of ApiResponse (Dictionary<string, TeamEventStatus>)")]
    public async Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfoAsync(
            [Description("Event Key, eg '2016nytr'")] string eventKey,
            [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'eventKey' is set
        if (eventKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'eventKey' when calling ListApi->GetEventTeamsStatuses");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("event_key", eventKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/event/{event_key}/teams/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Event&gt;</returns>
    public IList<Event>? GetEventsByYear(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = GetEventsByYearWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Event&gt;</returns>
    public ApiResponse<List<Event>> GetEventsByYearWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Event>> localVarResponse = this.Client.Get<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Event&gt;</returns>
    [KernelFunction, Description("Gets a list of events in the given year.")]
    [return: Description("Task of List<Event>")]
    public async Task<List<Event>> GetEventsByYearAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Event>> localVarResponse = await GetEventsByYearAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
    [KernelFunction, Description("Gets a list of events in the given year.")]
    [return: Description("Task of ApiResponse (List<Event>)")]
    public async Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Event>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/events/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetEventsByYearKeys(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetEventsByYearKeysWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of event keys in the given year.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetEventsByYearKeysAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetEventsByYearKeysAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of event keys in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of event keys in the given year.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/events/{year}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;EventSimple&gt;</returns>
    public IList<EventSimple>? GetEventsByYearSimple(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = GetEventsByYearSimpleWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
    public ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<EventSimple>> localVarResponse = this.Client.Get<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;EventSimple&gt;</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given year.")]
    [return: Description("Task of List<EventSimple>")]
    public async Task<List<EventSimple>> GetEventsByYearSimpleAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<EventSimple>> localVarResponse = await GetEventsByYearSimpleAsyncWithHttpInfoAsync(year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a short-form list of events in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
    [KernelFunction, Description("Gets a short-form list of events in the given year.")]
    [return: Description("Task of ApiResponse (List<EventSimple>)")]
    public async Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfoAsync(int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<EventSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<EventSimple>>("/events/{year}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetEventsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public IDictionary<string, TeamEventStatus>? GetTeamEventsStatusesByYear(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    public ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo(string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling ListApi->GetTeamEventsStatusesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = this.Client.Get<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for events this team has competed at in the given year.")]
    [return: Description("Task of Dictionary<string, TeamEventStatus>")]
    public async Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(teamKey, year, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
    [KernelFunction, Description("Gets a key-value list of the event statuses for events this team has competed at in the given year.")]
    [return: Description("Task of ApiResponse (Dictionary<string, TeamEventStatus>)")]
    public async Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey, int year,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling ListApi->GetTeamEventsStatusesByYear");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, TeamEventStatus>>("/team/{team_key}/events/{year}/statuses", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    public IList<Team>? GetTeams(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = GetTeamsWithHttpInfo(pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    public ApiResponse<List<Team>> GetTeamsWithHttpInfo(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Team>> localVarResponse = this.Client.Get<List<Team>>("/teams/{page_num}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects, paginated in groups of 500.")]
    [return: Description("Task of List<Team>")]
    public async Task<List<Team>> GetTeamsAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = await GetTeamsAsyncWithHttpInfoAsync(pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects, paginated in groups of 500.")]
    [return: Description("Task of ApiResponse (List<Team>)")]
    public async Task<ApiResponse<List<Team>>> GetTeamsAsyncWithHttpInfoAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Team>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{page_num}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeams", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;Team&gt;</returns>
    public IList<Team>? GetTeamsByYear(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = GetTeamsByYearWithHttpInfo(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;Team&gt;</returns>
    public ApiResponse<List<Team>> GetTeamsByYearWithHttpInfo(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<Team>> localVarResponse = this.Client.Get<List<Team>>("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;Team&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of List<Team>")]
    public async Task<List<Team>> GetTeamsByYearAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<Team>> localVarResponse = await GetTeamsByYearAsyncWithHttpInfoAsync(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of ApiResponse (List<Team>)")]
    public async Task<ApiResponse<List<Team>>> GetTeamsByYearAsyncWithHttpInfoAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<Team>> localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/teams/{year}/{page_num}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamsByYearKeys(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamsByYearKeysWithHttpInfo(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamsByYearKeysWithHttpInfo(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list Team Keys that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetTeamsByYearKeysAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamsByYearKeysAsyncWithHttpInfoAsync(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list Team Keys that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamsByYearKeysAsyncWithHttpInfoAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{year}/{page_num}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYearKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    public IList<TeamSimple>? GetTeamsByYearSimple(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsByYearSimpleWithHttpInfo(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    public ApiResponse<List<TeamSimple>> GetTeamsByYearSimpleWithHttpInfo(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<TeamSimple>> localVarResponse = this.Client.Get<List<TeamSimple>>("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    [KernelFunction, Description("Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of List<TeamSimple>")]
    public async Task<List<TeamSimple>> GetTeamsByYearSimpleAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsByYearSimpleAsyncWithHttpInfoAsync(year, pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    [KernelFunction, Description("Gets a list of short form 'Team_Simple' objects that competed in the given year, paginated in groups of 500.")]
    [return: Description("Task of ApiResponse (List<TeamSimple>)")]
    public async Task<ApiResponse<List<TeamSimple>>> GetTeamsByYearSimpleAsyncWithHttpInfoAsync(int year, int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<TeamSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{year}/{page_num}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsByYearSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetTeamsKeys(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetTeamsKeysWithHttpInfo(pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetTeamsKeysWithHttpInfo(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)")]
    [return: Description("Task of List<string>")]
    public async Task<List<string>> GetTeamsKeysAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetTeamsKeysAsyncWithHttpInfoAsync(pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [KernelFunction, Description("Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)")]
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetTeamsKeysAsyncWithHttpInfoAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/teams/{page_num}/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;TeamSimple&gt;</returns>
    public IList<TeamSimple>? GetTeamsSimple(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = GetTeamsSimpleWithHttpInfo(pageNum, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
    public ApiResponse<List<TeamSimple>> GetTeamsSimpleWithHttpInfo(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<TeamSimple>> localVarResponse = this.Client.Get<List<TeamSimple>>("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;TeamSimple&gt;</returns>
    [KernelFunction, Description("Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.")]
    [return: Description("Task of List<TeamSimple>")]
    public async Task<List<TeamSimple>> GetTeamsSimpleAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {
        ApiResponse<List<TeamSimple>> localVarResponse = await GetTeamsSimpleAsyncWithHttpInfoAsync(pageNum, ifModifiedSince);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNum">Page number of results to return, zero-indexed</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
    [KernelFunction, Description("Gets a list of short form 'Team_Simple' objects, paginated in groups of 500.")]
    [return: Description("Task of ApiResponse (List<TeamSimple>)")]
    public async Task<ApiResponse<List<TeamSimple>>> GetTeamsSimpleAsyncWithHttpInfoAsync(int pageNum,
        [Description("Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)")] string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("page_num", pageNum.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<TeamSimple>> localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSimple>>("/teams/{page_num}/simple", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamsSimple", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
