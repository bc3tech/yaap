/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// APIStatus
/// </summary>
[DataContract]
public partial record APIStatus : IValidatableObject
{
    /// <summary>
    /// Year of the current FRC season.
    /// </summary>
    /// <value>Year of the current FRC season.</value>
    [DataMember(Name = "current_season", EmitDefaultValue = false), JsonPropertyName("current_season")]
    public int CurrentSeason { get; set; }

    /// <summary>
    /// Maximum FRC season year for valid queries.
    /// </summary>
    /// <value>Maximum FRC season year for valid queries.</value>
    [DataMember(Name = "max_season", EmitDefaultValue = false), JsonPropertyName("max_season")]
    public int MaxSeason { get; set; }

    /// <summary>
    /// True if the entire FMS API provided by FIRST is down.
    /// </summary>
    /// <value>True if the entire FMS API provided by FIRST is down.</value>
    [DataMember(Name = "is_datafeed_down", EmitDefaultValue = false), JsonPropertyName("is_datafeed_down")]
    public bool IsDatafeedDown { get; set; }

    /// <summary>
    /// An array of strings containing event keys of any active events that are no longer updating.
    /// </summary>
    /// <value>An array of strings containing event keys of any active events that are no longer updating.</value>
    [DataMember(Name = "down_events", EmitDefaultValue = false), JsonPropertyName("down_events")]
    public IList<string>? DownEvents { get; set; }

    /// <summary>
    /// Gets or Sets Ios
    /// </summary>
    [DataMember(Name = "ios", EmitDefaultValue = false), JsonPropertyName("ios")]
    public APIStatusAppVersion? Ios { get; set; }

    /// <summary>
    /// Gets or Sets Android
    /// </summary>
    [DataMember(Name = "android", EmitDefaultValue = false), JsonPropertyName("android")]
    public APIStatusAppVersion? Android { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class APIStatus {\n");
        sb.Append("  CurrentSeason: ").Append(this.CurrentSeason).Append('\n');
        sb.Append("  MaxSeason: ").Append(this.MaxSeason).Append('\n');
        sb.Append("  IsDatafeedDown: ").Append(this.IsDatafeedDown).Append('\n');
        sb.Append("  DownEvents: ").Append(this.DownEvents).Append('\n');
        sb.Append("  Ios: ").Append(this.Ios).Append('\n');
        sb.Append("  Android: ").Append(this.Android).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.CurrentSeason.GetHashCode();
            hashCode = (hashCode * 59) + this.MaxSeason.GetHashCode();
            hashCode = (hashCode * 59) + this.IsDatafeedDown.GetHashCode();
            if (this.DownEvents is not null)
            {
                hashCode = (hashCode * 59) + this.DownEvents.GetHashCode();
            }

            if (this.Ios is not null)
            {
                hashCode = (hashCode * 59) + this.Ios.GetHashCode();
            }

            if (this.Android is not null)
            {
                hashCode = (hashCode * 59) + this.Android.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
