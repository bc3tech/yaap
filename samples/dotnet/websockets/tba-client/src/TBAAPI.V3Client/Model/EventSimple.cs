/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

using OpenAPIDateConverter = Client.OpenAPIDateConverter;

/// <summary>
/// EventSimple
/// </summary>
[DataContract]
public partial record EventSimple : IValidatableObject
{
    /// <summary>
    /// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
    /// </summary>
    /// <value>TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string? Key { get; set; }

    /// <summary>
    /// Official name of event on record either provided by FIRST or organizers of offseason event.
    /// </summary>
    /// <value>Official name of event on record either provided by FIRST or organizers of offseason event.</value>
    [DataMember(Name = "name", EmitDefaultValue = false), JsonPropertyName("name")]
    public string? Name { get; set; }

    /// <summary>
    /// Event short code, as provided by FIRST.
    /// </summary>
    /// <value>Event short code, as provided by FIRST.</value>
    [DataMember(Name = "event_code", EmitDefaultValue = false), JsonPropertyName("event_code")]
    public string? EventCode { get; set; }

    /// <summary>
    /// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
    /// </summary>
    /// <value>Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2</value>
    [DataMember(Name = "event_type", EmitDefaultValue = false), JsonPropertyName("event_type")]
    public int EventType { get; set; }

    /// <summary>
    /// Gets or Sets District
    /// </summary>
    [DataMember(Name = "district", EmitDefaultValue = false), JsonPropertyName("district")]
    public DistrictList? District { get; set; }

    /// <summary>
    /// City, town, village, etc. the event is located in.
    /// </summary>
    /// <value>City, town, village, etc. the event is located in.</value>
    [DataMember(Name = "city", EmitDefaultValue = false), JsonPropertyName("city")]
    public string? City { get; set; }

    /// <summary>
    /// State or Province the event is located in.
    /// </summary>
    /// <value>State or Province the event is located in.</value>
    [DataMember(Name = "state_prov", EmitDefaultValue = false), JsonPropertyName("state_prov")]
    public string? StateProv { get; set; }

    /// <summary>
    /// Country the event is located in.
    /// </summary>
    /// <value>Country the event is located in.</value>
    [DataMember(Name = "country", EmitDefaultValue = false), JsonPropertyName("country")]
    public string? Country { get; set; }

    /// <summary>
    /// Event start date in 'yyyy-mm-dd' format.
    /// </summary>
    /// <value>Event start date in 'yyyy-mm-dd' format.</value>
    [DataMember(Name = "start_date", EmitDefaultValue = false), JsonPropertyName("start_date")]
    [JsonConverter(typeof(OpenAPIDateConverter))]
    public DateTime? StartDate { get; set; }

    /// <summary>
    /// Event end date in 'yyyy-mm-dd' format.
    /// </summary>
    /// <value>Event end date in 'yyyy-mm-dd' format.</value>
    [DataMember(Name = "end_date", EmitDefaultValue = false), JsonPropertyName("end_date")]
    [JsonConverter(typeof(OpenAPIDateConverter))]
    public DateTime? EndDate { get; set; }

    /// <summary>
    /// Year the event data is for.
    /// </summary>
    /// <value>Year the event data is for.</value>
    [DataMember(Name = "year", EmitDefaultValue = false), JsonPropertyName("year")]
    public int Year { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class EventSimple {\n");
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  Name: ").Append(this.Name).Append('\n');
        sb.Append("  EventCode: ").Append(this.EventCode).Append('\n');
        sb.Append("  EventType: ").Append(this.EventType).Append('\n');
        sb.Append("  District: ").Append(this.District).Append('\n');
        sb.Append("  City: ").Append(this.City).Append('\n');
        sb.Append("  StateProv: ").Append(this.StateProv).Append('\n');
        sb.Append("  Country: ").Append(this.Country).Append('\n');
        sb.Append("  StartDate: ").Append(this.StartDate).Append('\n');
        sb.Append("  EndDate: ").Append(this.EndDate).Append('\n');
        sb.Append("  Year: ").Append(this.Year).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        var hashCode = new HashCode();
        hashCode.Add(this.Key);
        hashCode.Add(this.Name);
        hashCode.Add(this.EventCode);
        hashCode.Add(this.EventType);
        hashCode.Add(this.District);
        hashCode.Add(this.City);
        hashCode.Add(this.StateProv);
        hashCode.Add(this.Country);
        hashCode.Add(this.StartDate);
        hashCode.Add(this.EndDate);
        hashCode.Add(this.Year);
        return hashCode.ToHashCode();
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
