/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Client;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;

/// <summary>
/// Represents a set of configuration settings
/// </summary>
public class Configuration : IReadableConfiguration
{
    #region Constants

    /// <summary>
    /// Version of the package.
    /// </summary>
    /// <value>Version of the package.</value>
    public const string Version = "3.8.0";

    /// <summary>
    /// Identifier for ISO 8601 DateTime Format
    /// </summary>
    /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
    // ReSharper disable once InconsistentNaming
    public const string ISO8601_DATETIME_FORMAT = "o";

    #endregion Constants

    #region Static Members

    /// <summary>
    /// Default creation of exceptions for a given method name and response object
    /// </summary>
    public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
    {
        //var status = (int)response.StatusCode;
        //return status >= 400
        //    ? new ApiException(status,
        //        string.Format("Error calling {0}: {1}", methodName, response.RawContent),
        //        response.RawContent)
        //    : (Exception?)null;
        return default;
    };

    #endregion Static Members

    #region Private Members

    private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
    private string _tempFolderPath = Path.GetTempPath();

    #endregion Private Members

    #region Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="Configuration" /> class
    /// </summary>
    public Configuration()
    {
        this.UserAgent = "OpenAPI-Generator/3.8.0/csharp";
        this.BasePath = "https://www.thebluealliance.com/api/v3";
        this.DefaultHeaders = new ConcurrentDictionary<string, string>();
        this.ApiKey = new ConcurrentDictionary<string, string>();
        this.ApiKeyPrefix = new ConcurrentDictionary<string, string>();

        // Setting Timeout has side effects (forces ApiClient creation).
        this.Timeout = 100000;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Configuration" /> class
    /// </summary>
    public Configuration(
        IDictionary<string, string> defaultHeaders,
        IDictionary<string, string> apiKey,
        IDictionary<string, string> apiKeyPrefix,
        string basePath = "https://www.thebluealliance.com/api/v3") : this()
    {
        if (string.IsNullOrWhiteSpace(basePath))
        {
            throw new ArgumentException("The provided basePath is invalid.", nameof(basePath));
        }

        ArgumentNullException.ThrowIfNull(defaultHeaders);
        ArgumentNullException.ThrowIfNull(apiKey);
        ArgumentNullException.ThrowIfNull(apiKeyPrefix);

        this.BasePath = basePath;

        foreach (KeyValuePair<string, string> keyValuePair in defaultHeaders)
        {
            this.DefaultHeaders.Add(keyValuePair);
        }

        foreach (KeyValuePair<string, string> keyValuePair in apiKey)
        {
            this.ApiKey.Add(keyValuePair);
        }

        foreach (KeyValuePair<string, string> keyValuePair in apiKeyPrefix)
        {
            this.ApiKeyPrefix.Add(keyValuePair);
        }
    }

    #endregion Constructors

    #region Properties

    /// <summary>
    /// Gets or sets the base path for API access.
    /// </summary>
    public virtual string BasePath { get; set; }

    /// <summary>
    /// Gets or sets the default headers.
    /// </summary>
    public virtual IDictionary<string, string> DefaultHeaders { get; set; }

    /// <summary>
    /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
    /// </summary>
    public virtual int Timeout { get; set; }

    /// <summary>
    /// Gets or sets the HTTP user agent.
    /// </summary>
    /// <value>Http user agent.</value>
    public virtual string UserAgent { get; set; }

    /// <summary>
    /// Gets or sets the username (HTTP basic authentication).
    /// </summary>
    /// <value>The username.</value>
    public virtual string? Username { get; set; }

    /// <summary>
    /// Gets or sets the password (HTTP basic authentication).
    /// </summary>
    /// <value>The password.</value>
    public virtual string? Password { get; set; }

    /// <summary>
    /// Gets the API key with prefix.
    /// </summary>
    /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
    /// <returns>API key with prefix.</returns>
    public string? GetApiKeyWithPrefix(string apiKeyIdentifier)
    {
        this.ApiKey.TryGetValue(apiKeyIdentifier, out var apiKeyValue);
        return this.ApiKeyPrefix.TryGetValue(apiKeyIdentifier, out var apiKeyPrefix) ? $@"{apiKeyPrefix} {apiKeyValue}" : apiKeyValue;
    }

    /// <summary>
    /// Gets or sets certificate collection to be sent with requests.
    /// </summary>
    /// <value>X509 Certificate collection.</value>
    public X509CertificateCollection? ClientCertificates { get; set; }

    /// <summary>
    /// Gets or sets the access token for OAuth2 authentication.
    /// 
    /// This helper property simplifies code generation.
    /// </summary>
    /// <value>The access token.</value>
    public virtual string? AccessToken { get; set; }

    /// <summary>
    /// Gets or sets the temporary folder path to store the files downloaded from the server.
    /// </summary>
    /// <value>Folder path.</value>
    public virtual string TempFolderPath
    {
        get => _tempFolderPath;

        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                _tempFolderPath = Path.GetTempPath();
                return;
            }

            // create the directory if it does not exist
            Directory.CreateDirectory(value);

            // check if the path contains directory separator at the end
            _tempFolderPath = value.TrimEnd(Path.DirectorySeparatorChar);
        }
    }

    /// <summary>
    /// Gets or sets the date time format used when serializing in the ApiClient
    /// By default, it's set to ISO 8601 - "o", for others see:
    /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
    /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
    /// No validation is done to ensure that the string you're providing is valid
    /// </summary>
    /// <value>The DateTimeFormat string</value>
    public virtual string DateTimeFormat
    {
        get => _dateTimeFormat;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                // Never allow a blank or null string, go back to the default
                _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                return;
            }

            // Caution, no validation when you choose date time format other than ISO 8601
            // Take a look at the above links
            _dateTimeFormat = value;
        }
    }

    /// <summary>
    /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
    ///
    /// Whatever you set here will be prepended to the value defined in AddApiKey.
    /// 
    /// An example invocation here might be:
    /// <example>
    /// ApiKeyPrefix["Authorization"] = "Bearer";
    /// </example>
    /// â€¦ where ApiKey["Authorization"] would then be used to set the value of your bearer token.
    /// 
    /// <remarks>
    /// OAuth2 workflows should set tokens via AccessToken.
    /// </remarks>
    /// </summary>
    /// <value>The prefix of the API key.</value>
    public virtual IDictionary<string, string> ApiKeyPrefix { get; set; }

    /// <summary>
    /// Gets or sets the API key based on the authentication name.
    /// </summary>
    /// <value>The API key.</value>
    public virtual IDictionary<string, string> ApiKey { get; set; }

    #endregion Properties

    #region Methods

    /// <summary>
    /// Returns a string with essential information for debugging.
    /// </summary>
    public static string ToDebugReport()
    {
        var report = "C# SDK (TBAAPI.V3Client) Debug Report:\n";
        report += "    OS: " + System.Runtime.InteropServices.RuntimeInformation.OSDescription + "\n";
        report += "    Version of the API: 3.8.0\n";
        report += "    SDK Package Version: 3.8.0\n";

        return report;
    }

    #endregion Methods

    #region Static Members
    /// <summary>
    /// Merge configurations.
    /// </summary>
    /// <param name="first">First configuration.</param>
    /// <param name="second">Second configuration.</param>
    /// <return>Merged configuration.</return>
    public static IReadableConfiguration MergeConfigurations(IReadableConfiguration first, IReadableConfiguration second)
    {
        if (second is null)
        {
            return first ?? GlobalConfiguration.Instance;
        }

        IDictionary<string, string> apiKey = first.ApiKey;
        IDictionary<string, string> apiKeyPrefix = first.ApiKeyPrefix;
        IDictionary<string, string> defaultHeaders = first.DefaultHeaders;

        foreach (KeyValuePair<string, string> kvp in second.ApiKey)
        {
            apiKey[kvp.Key] = kvp.Value;
        }

        foreach (KeyValuePair<string, string> kvp in second.ApiKeyPrefix)
        {
            apiKeyPrefix[kvp.Key] = kvp.Value;
        }

        foreach (KeyValuePair<string, string> kvp in second.DefaultHeaders)
        {
            defaultHeaders[kvp.Key] = kvp.Value;
        }

        var config = new Configuration
        {
            ApiKey = apiKey,
            ApiKeyPrefix = apiKeyPrefix,
            DefaultHeaders = defaultHeaders,
            BasePath = second.BasePath ?? first.BasePath,
            Timeout = second.Timeout,
            UserAgent = second.UserAgent ?? first.UserAgent,
            Username = second.Username ?? first.Username,
            Password = second.Password ?? first.Password,
            AccessToken = second.AccessToken ?? first.AccessToken,
            TempFolderPath = second.TempFolderPath ?? first.TempFolderPath,
            DateTimeFormat = second.DateTimeFormat ?? first.DateTimeFormat
        };
        return config;
    }
    #endregion Static Members
}
