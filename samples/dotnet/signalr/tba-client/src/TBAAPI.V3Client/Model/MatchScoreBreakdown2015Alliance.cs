/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// MatchScoreBreakdown2015Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2015Alliance" /> class.
/// </remarks>
[DataContract]
public partial record MatchScoreBreakdown2015Alliance : IValidatableObject
{

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>
    [DataMember(Name = "auto_points", EmitDefaultValue = false), JsonPropertyName("auto_points")]
    public int AutoPoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>
    [DataMember(Name = "teleop_points", EmitDefaultValue = false), JsonPropertyName("teleop_points")]
    public int TeleopPoints { get; set; }

    /// <summary>
    /// Gets or Sets ContainerPoints
    /// </summary>
    [DataMember(Name = "container_points", EmitDefaultValue = false), JsonPropertyName("container_points")]
    public int ContainerPoints { get; set; }

    /// <summary>
    /// Gets or Sets TotePoints
    /// </summary>
    [DataMember(Name = "tote_points", EmitDefaultValue = false), JsonPropertyName("tote_points")]
    public int TotePoints { get; set; }

    /// <summary>
    /// Gets or Sets LitterPoints
    /// </summary>
    [DataMember(Name = "litter_points", EmitDefaultValue = false), JsonPropertyName("litter_points")]
    public int LitterPoints { get; set; }

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>
    [DataMember(Name = "foul_points", EmitDefaultValue = false), JsonPropertyName("foul_points")]
    public int FoulPoints { get; set; }

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>
    [DataMember(Name = "adjust_points", EmitDefaultValue = false), JsonPropertyName("adjust_points")]
    public int AdjustPoints { get; set; }

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>
    [DataMember(Name = "total_points", EmitDefaultValue = false), JsonPropertyName("total_points")]
    public int TotalPoints { get; set; }

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>
    [DataMember(Name = "foul_count", EmitDefaultValue = false), JsonPropertyName("foul_count")]
    public int FoulCount { get; set; }

    /// <summary>
    /// Gets or Sets ToteCountFar
    /// </summary>
    [DataMember(Name = "tote_count_far", EmitDefaultValue = false), JsonPropertyName("tote_count_far")]
    public int ToteCountFar { get; set; }

    /// <summary>
    /// Gets or Sets ToteCountNear
    /// </summary>
    [DataMember(Name = "tote_count_near", EmitDefaultValue = false), JsonPropertyName("tote_count_near")]
    public int ToteCountNear { get; set; }

    /// <summary>
    /// Gets or Sets ToteSet
    /// </summary>
    [DataMember(Name = "tote_set", EmitDefaultValue = false), JsonPropertyName("tote_set")]
    public bool ToteSet { get; set; }

    /// <summary>
    /// Gets or Sets ToteStack
    /// </summary>
    [DataMember(Name = "tote_stack", EmitDefaultValue = false), JsonPropertyName("tote_stack")]
    public bool ToteStack { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel1
    /// </summary>
    [DataMember(Name = "container_count_level1", EmitDefaultValue = false), JsonPropertyName("container_count_level1")]
    public int ContainerCountLevel1 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel2
    /// </summary>
    [DataMember(Name = "container_count_level2", EmitDefaultValue = false), JsonPropertyName("container_count_level2")]
    public int ContainerCountLevel2 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel3
    /// </summary>
    [DataMember(Name = "container_count_level3", EmitDefaultValue = false), JsonPropertyName("container_count_level3")]
    public int ContainerCountLevel3 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel4
    /// </summary>
    [DataMember(Name = "container_count_level4", EmitDefaultValue = false), JsonPropertyName("container_count_level4")]
    public int ContainerCountLevel4 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel5
    /// </summary>
    [DataMember(Name = "container_count_level5", EmitDefaultValue = false), JsonPropertyName("container_count_level5")]
    public int ContainerCountLevel5 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerCountLevel6
    /// </summary>
    [DataMember(Name = "container_count_level6", EmitDefaultValue = false), JsonPropertyName("container_count_level6")]
    public int ContainerCountLevel6 { get; set; }

    /// <summary>
    /// Gets or Sets ContainerSet
    /// </summary>
    [DataMember(Name = "container_set", EmitDefaultValue = false), JsonPropertyName("container_set")]
    public bool ContainerSet { get; set; }

    /// <summary>
    /// Gets or Sets LitterCountContainer
    /// </summary>
    [DataMember(Name = "litter_count_container", EmitDefaultValue = false), JsonPropertyName("litter_count_container")]
    public int LitterCountContainer { get; set; }

    /// <summary>
    /// Gets or Sets LitterCountLandfill
    /// </summary>
    [DataMember(Name = "litter_count_landfill", EmitDefaultValue = false), JsonPropertyName("litter_count_landfill")]
    public int LitterCountLandfill { get; set; }

    /// <summary>
    /// Gets or Sets LitterCountUnprocessed
    /// </summary>
    [DataMember(Name = "litter_count_unprocessed", EmitDefaultValue = false), JsonPropertyName("litter_count_unprocessed")]
    public int LitterCountUnprocessed { get; set; }

    /// <summary>
    /// Gets or Sets RobotSet
    /// </summary>
    [DataMember(Name = "robot_set", EmitDefaultValue = false), JsonPropertyName("robot_set")]
    public bool RobotSet { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MatchScoreBreakdown2015Alliance {\n");
        sb.Append("  AutoPoints: ").Append(this.AutoPoints).Append('\n');
        sb.Append("  TeleopPoints: ").Append(this.TeleopPoints).Append('\n');
        sb.Append("  ContainerPoints: ").Append(this.ContainerPoints).Append('\n');
        sb.Append("  TotePoints: ").Append(this.TotePoints).Append('\n');
        sb.Append("  LitterPoints: ").Append(this.LitterPoints).Append('\n');
        sb.Append("  FoulPoints: ").Append(this.FoulPoints).Append('\n');
        sb.Append("  AdjustPoints: ").Append(this.AdjustPoints).Append('\n');
        sb.Append("  TotalPoints: ").Append(this.TotalPoints).Append('\n');
        sb.Append("  FoulCount: ").Append(this.FoulCount).Append('\n');
        sb.Append("  ToteCountFar: ").Append(this.ToteCountFar).Append('\n');
        sb.Append("  ToteCountNear: ").Append(this.ToteCountNear).Append('\n');
        sb.Append("  ToteSet: ").Append(this.ToteSet).Append('\n');
        sb.Append("  ToteStack: ").Append(this.ToteStack).Append('\n');
        sb.Append("  ContainerCountLevel1: ").Append(this.ContainerCountLevel1).Append('\n');
        sb.Append("  ContainerCountLevel2: ").Append(this.ContainerCountLevel2).Append('\n');
        sb.Append("  ContainerCountLevel3: ").Append(this.ContainerCountLevel3).Append('\n');
        sb.Append("  ContainerCountLevel4: ").Append(this.ContainerCountLevel4).Append('\n');
        sb.Append("  ContainerCountLevel5: ").Append(this.ContainerCountLevel5).Append('\n');
        sb.Append("  ContainerCountLevel6: ").Append(this.ContainerCountLevel6).Append('\n');
        sb.Append("  ContainerSet: ").Append(this.ContainerSet).Append('\n');
        sb.Append("  LitterCountContainer: ").Append(this.LitterCountContainer).Append('\n');
        sb.Append("  LitterCountLandfill: ").Append(this.LitterCountLandfill).Append('\n');
        sb.Append("  LitterCountUnprocessed: ").Append(this.LitterCountUnprocessed).Append('\n');
        sb.Append("  RobotSet: ").Append(this.RobotSet).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        var hash = new HashCode();
        hash.Add(this.AutoPoints);
        hash.Add(this.TeleopPoints);
        hash.Add(this.ContainerPoints);
        hash.Add(this.TotePoints);
        hash.Add(this.LitterPoints);
        hash.Add(this.FoulPoints);
        hash.Add(this.AdjustPoints);
        hash.Add(this.TotalPoints);
        hash.Add(this.FoulCount);
        hash.Add(this.ToteCountFar);
        hash.Add(this.ToteCountNear);
        hash.Add(this.ToteSet);
        hash.Add(this.ToteStack);
        hash.Add(this.ContainerCountLevel1);
        hash.Add(this.ContainerCountLevel2);
        hash.Add(this.ContainerCountLevel3);
        hash.Add(this.ContainerCountLevel4);
        hash.Add(this.ContainerCountLevel5);
        hash.Add(this.ContainerCountLevel6);
        hash.Add(this.ContainerSet);
        hash.Add(this.LitterCountContainer);
        hash.Add(this.LitterCountLandfill);
        hash.Add(this.LitterCountUnprocessed);
        hash.Add(this.RobotSet);
        return hash.ToHashCode();
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
