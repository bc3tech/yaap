/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// Team
/// </summary>
[DataContract]
public partial record Team : IValidatableObject
{
    /// <summary>
    /// TBA team key with the format 'frcXXXX' with 'XXXX' representing the team number.
    /// </summary>
    /// <value>TBA team key with the format 'frcXXXX' with 'XXXX' representing the team number.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string Key { get; set; } = string.Empty;

    /// <summary>
    /// Official team number issued by FIRST.
    /// </summary>
    /// <value>Official team number issued by FIRST.</value>
    [DataMember(Name = "team_number", EmitDefaultValue = false), JsonPropertyName("team_number")]
    public int TeamNumber { get; set; }

    /// <summary>
    /// Team nickname provided by FIRST.
    /// </summary>
    /// <value>Team nickname provided by FIRST.</value>
    [DataMember(Name = "nickname", EmitDefaultValue = false), JsonPropertyName("nickname")]
    public string? Nickname { get; set; }

    /// <summary>
    /// Official long name registered with FIRST.
    /// </summary>
    /// <value>Official long name registered with FIRST.</value>
    [DataMember(Name = "name", EmitDefaultValue = false), JsonPropertyName("name")]
    public string? Name { get; set; }

    /// <summary>
    /// Name of team school or affilited group registered with FIRST.
    /// </summary>
    /// <value>Name of team school or affilited group registered with FIRST.</value>
    [DataMember(Name = "school_name", EmitDefaultValue = false), JsonPropertyName("school_name")]
    public string? SchoolName { get; set; }

    /// <summary>
    /// City of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>City of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "city", EmitDefaultValue = false), JsonPropertyName("city")]
    public string? City { get; set; }

    /// <summary>
    /// State of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>State of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "state_prov", EmitDefaultValue = false), JsonPropertyName("state_prov")]
    public string? StateProv { get; set; }

    /// <summary>
    /// Country of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>Country of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "country", EmitDefaultValue = false), JsonPropertyName("country")]
    public string? Country { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "address", EmitDefaultValue = false), JsonPropertyName("address")]
    public string? Address { get; set; }

    /// <summary>
    /// Postal code from the team address.
    /// </summary>
    /// <value>Postal code from the team address.</value>
    [DataMember(Name = "postal_code", EmitDefaultValue = false), JsonPropertyName("postal_code")]
    public string? PostalCode { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "gmaps_place_id", EmitDefaultValue = false), JsonPropertyName("gmaps_place_id")]
    public string? GmapsPlaceId { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "gmaps_url", EmitDefaultValue = false), JsonPropertyName("gmaps_url")]
    public string? GmapsUrl { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "lat", EmitDefaultValue = false), JsonPropertyName("lat")]
    public double? Lat { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "lng", EmitDefaultValue = false), JsonPropertyName("lng")]
    public double? Lng { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [DataMember(Name = "location_name", EmitDefaultValue = false), JsonPropertyName("location_name")]
    public string? LocationName { get; set; }

    /// <summary>
    /// Official website associated with the team.
    /// </summary>
    /// <value>Official website associated with the team.</value>
    [DataMember(Name = "website", EmitDefaultValue = false), JsonPropertyName("website")]
    public string? Website { get; set; }

    /// <summary>
    /// First year the team officially competed.
    /// </summary>
    /// <value>First year the team officially competed.</value>
    [DataMember(Name = "rookie_year", EmitDefaultValue = false), JsonPropertyName("rookie_year")]
    public int? RookieYear { get; set; }

    /// <summary>
    /// Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
    /// </summary>
    /// <value>Team&#39;s motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.</value>
    [DataMember(Name = "motto", EmitDefaultValue = false), JsonPropertyName("motto")]
    public string? Motto { get; set; }

    /// <summary>
    /// Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
    /// </summary>
    /// <value>Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.</value>
    [DataMember(Name = "home_championship", EmitDefaultValue = false), JsonPropertyName("home_championship")]
    public object? HomeChampionship { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Team {\n");
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  TeamNumber: ").Append(this.TeamNumber).Append('\n');
        sb.Append("  Nickname: ").Append(this.Nickname).Append('\n');
        sb.Append("  Name: ").Append(this.Name).Append('\n');
        sb.Append("  SchoolName: ").Append(this.SchoolName).Append('\n');
        sb.Append("  City: ").Append(this.City).Append('\n');
        sb.Append("  StateProv: ").Append(this.StateProv).Append('\n');
        sb.Append("  Country: ").Append(this.Country).Append('\n');
        sb.Append("  Address: ").Append(this.Address).Append('\n');
        sb.Append("  PostalCode: ").Append(this.PostalCode).Append('\n');
        sb.Append("  GmapsPlaceId: ").Append(this.GmapsPlaceId).Append('\n');
        sb.Append("  GmapsUrl: ").Append(this.GmapsUrl).Append('\n');
        sb.Append("  Lat: ").Append(this.Lat).Append('\n');
        sb.Append("  Lng: ").Append(this.Lng).Append('\n');
        sb.Append("  LocationName: ").Append(this.LocationName).Append('\n');
        sb.Append("  Website: ").Append(this.Website).Append('\n');
        sb.Append("  RookieYear: ").Append(this.RookieYear).Append('\n');
        sb.Append("  Motto: ").Append(this.Motto).Append('\n');
        sb.Append("  HomeChampionship: ").Append(this.HomeChampionship).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Key is not null)
            {
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.TeamNumber.GetHashCode();
            if (this.Nickname is not null)
            {
                hashCode = (hashCode * 59) + this.Nickname.GetHashCode();
            }

            if (this.Name is not null)
            {
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
            }

            if (this.SchoolName is not null)
            {
                hashCode = (hashCode * 59) + this.SchoolName.GetHashCode();
            }

            if (this.City is not null)
            {
                hashCode = (hashCode * 59) + this.City.GetHashCode();
            }

            if (this.StateProv is not null)
            {
                hashCode = (hashCode * 59) + this.StateProv.GetHashCode();
            }

            if (this.Country is not null)
            {
                hashCode = (hashCode * 59) + this.Country.GetHashCode();
            }

            if (this.Address is not null)
            {
                hashCode = (hashCode * 59) + this.Address.GetHashCode();
            }

            if (this.PostalCode is not null)
            {
                hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
            }

            if (this.GmapsPlaceId is not null)
            {
                hashCode = (hashCode * 59) + this.GmapsPlaceId.GetHashCode();
            }

            if (this.GmapsUrl is not null)
            {
                hashCode = (hashCode * 59) + this.GmapsUrl.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.Lat.GetHashCode();
            hashCode = (hashCode * 59) + this.Lng.GetHashCode();
            if (this.LocationName is not null)
            {
                hashCode = (hashCode * 59) + this.LocationName.GetHashCode();
            }

            if (this.Website is not null)
            {
                hashCode = (hashCode * 59) + this.Website.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.RookieYear.GetHashCode();
            if (this.Motto is not null)
            {
                hashCode = (hashCode * 59) + this.Motto.GetHashCode();
            }

            if (this.HomeChampionship is not null)
            {
                hashCode = (hashCode * 59) + this.HomeChampionship.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
