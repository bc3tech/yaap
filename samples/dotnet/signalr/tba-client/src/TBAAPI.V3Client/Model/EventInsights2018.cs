/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// Insights for FIRST Power Up qualification and elimination matches.
/// </summary>
[DataContract]
public partial record EventInsights2018 : IValidatableObject
{
    /// <summary>
    /// An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.</value>
    [DataMember(Name = "auto_quest_achieved", EmitDefaultValue = false), JsonPropertyName("auto_quest_achieved")]
    public IList<float>? AutoQuestAchieved { get; set; }

    /// <summary>
    /// Average number of boost power up scored (out of 3).
    /// </summary>
    /// <value>Average number of boost power up scored (out of 3).</value>
    [DataMember(Name = "average_boost_played", EmitDefaultValue = false), JsonPropertyName("average_boost_played")]
    public float AverageBoostPlayed { get; set; }

    /// <summary>
    /// Average endgame points.
    /// </summary>
    /// <value>Average endgame points.</value>
    [DataMember(Name = "average_endgame_points", EmitDefaultValue = false), JsonPropertyName("average_endgame_points")]
    public float AverageEndgamePoints { get; set; }

    /// <summary>
    /// Average number of force power up scored (out of 3).
    /// </summary>
    /// <value>Average number of force power up scored (out of 3).</value>
    [DataMember(Name = "average_force_played", EmitDefaultValue = false), JsonPropertyName("average_force_played")]
    public float AverageForcePlayed { get; set; }

    /// <summary>
    /// Average foul score.
    /// </summary>
    /// <value>Average foul score.</value>
    [DataMember(Name = "average_foul_score", EmitDefaultValue = false), JsonPropertyName("average_foul_score")]
    public float AverageFoulScore { get; set; }

    /// <summary>
    /// Average points scored during auto.
    /// </summary>
    /// <value>Average points scored during auto.</value>
    [DataMember(Name = "average_points_auto", EmitDefaultValue = false), JsonPropertyName("average_points_auto")]
    public float AveragePointsAuto { get; set; }

    /// <summary>
    /// Average points scored during teleop.
    /// </summary>
    /// <value>Average points scored during teleop.</value>
    [DataMember(Name = "average_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_points_teleop")]
    public float AveragePointsTeleop { get; set; }

    /// <summary>
    /// Average mobility points scored during auto.
    /// </summary>
    /// <value>Average mobility points scored during auto.</value>
    [DataMember(Name = "average_run_points_auto", EmitDefaultValue = false), JsonPropertyName("average_run_points_auto")]
    public float AverageRunPointsAuto { get; set; }

    /// <summary>
    /// Average scale ownership points scored.
    /// </summary>
    /// <value>Average scale ownership points scored.</value>
    [DataMember(Name = "average_scale_ownership_points", EmitDefaultValue = false), JsonPropertyName("average_scale_ownership_points")]
    public float AverageScaleOwnershipPoints { get; set; }

    /// <summary>
    /// Average scale ownership points scored during auto.
    /// </summary>
    /// <value>Average scale ownership points scored during auto.</value>
    [DataMember(Name = "average_scale_ownership_points_auto", EmitDefaultValue = false), JsonPropertyName("average_scale_ownership_points_auto")]
    public float AverageScaleOwnershipPointsAuto { get; set; }

    /// <summary>
    /// Average scale ownership points scored during teleop.
    /// </summary>
    /// <value>Average scale ownership points scored during teleop.</value>
    [DataMember(Name = "average_scale_ownership_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_scale_ownership_points_teleop")]
    public float AverageScaleOwnershipPointsTeleop { get; set; }

    /// <summary>
    /// Average score.
    /// </summary>
    /// <value>Average score.</value>
    [DataMember(Name = "average_score", EmitDefaultValue = false), JsonPropertyName("average_score")]
    public float AverageScore { get; set; }

    /// <summary>
    /// Average switch ownership points scored.
    /// </summary>
    /// <value>Average switch ownership points scored.</value>
    [DataMember(Name = "average_switch_ownership_points", EmitDefaultValue = false), JsonPropertyName("average_switch_ownership_points")]
    public float AverageSwitchOwnershipPoints { get; set; }

    /// <summary>
    /// Average switch ownership points scored during auto.
    /// </summary>
    /// <value>Average switch ownership points scored during auto.</value>
    [DataMember(Name = "average_switch_ownership_points_auto", EmitDefaultValue = false), JsonPropertyName("average_switch_ownership_points_auto")]
    public float AverageSwitchOwnershipPointsAuto { get; set; }

    /// <summary>
    /// Average switch ownership points scored during teleop.
    /// </summary>
    /// <value>Average switch ownership points scored during teleop.</value>
    [DataMember(Name = "average_switch_ownership_points_teleop", EmitDefaultValue = false), JsonPropertyName("average_switch_ownership_points_teleop")]
    public float AverageSwitchOwnershipPointsTeleop { get; set; }

    /// <summary>
    /// Average value points scored.
    /// </summary>
    /// <value>Average value points scored.</value>
    [DataMember(Name = "average_vault_points", EmitDefaultValue = false), JsonPropertyName("average_vault_points")]
    public float AverageVaultPoints { get; set; }

    /// <summary>
    /// Average margin of victory.
    /// </summary>
    /// <value>Average margin of victory.</value>
    [DataMember(Name = "average_win_margin", EmitDefaultValue = false), JsonPropertyName("average_win_margin")]
    public float AverageWinMargin { get; set; }

    /// <summary>
    /// Average winning score.
    /// </summary>
    /// <value>Average winning score.</value>
    [DataMember(Name = "average_win_score", EmitDefaultValue = false), JsonPropertyName("average_win_score")]
    public float AverageWinScore { get; set; }

    /// <summary>
    /// An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.</value>
    [DataMember(Name = "boost_played_counts", EmitDefaultValue = false), JsonPropertyName("boost_played_counts")]
    public IList<float>? BoostPlayedCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.</value>
    [DataMember(Name = "climb_counts", EmitDefaultValue = false), JsonPropertyName("climb_counts")]
    public IList<float>? ClimbCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.</value>
    [DataMember(Name = "face_the_boss_achieved", EmitDefaultValue = false), JsonPropertyName("face_the_boss_achieved")]
    public IList<float>? FaceTheBossAchieved { get; set; }

    /// <summary>
    /// An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.</value>
    [DataMember(Name = "force_played_counts", EmitDefaultValue = false), JsonPropertyName("force_played_counts")]
    public IList<float>? ForcePlayedCounts { get; set; }

    /// <summary>
    /// An array with three values, high score, match key from the match with the high score, and the name of the match
    /// </summary>
    /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
    [DataMember(Name = "high_score", EmitDefaultValue = false), JsonPropertyName("high_score")]
    public IList<string>? HighScore { get; set; }

    /// <summary>
    /// An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.</value>
    [DataMember(Name = "levitate_played_counts", EmitDefaultValue = false), JsonPropertyName("levitate_played_counts")]
    public IList<float>? LevitatePlayedCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.</value>
    [DataMember(Name = "run_counts_auto", EmitDefaultValue = false), JsonPropertyName("run_counts_auto")]
    public IList<float>? RunCountsAuto { get; set; }

    /// <summary>
    /// Average scale neutral percentage.
    /// </summary>
    /// <value>Average scale neutral percentage.</value>
    [DataMember(Name = "scale_neutral_percentage", EmitDefaultValue = false), JsonPropertyName("scale_neutral_percentage")]
    public float ScaleNeutralPercentage { get; set; }

    /// <summary>
    /// Average scale neutral percentage during auto.
    /// </summary>
    /// <value>Average scale neutral percentage during auto.</value>
    [DataMember(Name = "scale_neutral_percentage_auto", EmitDefaultValue = false), JsonPropertyName("scale_neutral_percentage_auto")]
    public float ScaleNeutralPercentageAuto { get; set; }

    /// <summary>
    /// Average scale neutral percentage during teleop.
    /// </summary>
    /// <value>Average scale neutral percentage during teleop.</value>
    [DataMember(Name = "scale_neutral_percentage_teleop", EmitDefaultValue = false), JsonPropertyName("scale_neutral_percentage_teleop")]
    public float ScaleNeutralPercentageTeleop { get; set; }

    /// <summary>
    /// An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.</value>
    [DataMember(Name = "switch_owned_counts_auto", EmitDefaultValue = false), JsonPropertyName("switch_owned_counts_auto")]
    public IList<float>? SwitchOwnedCountsAuto { get; set; }

    /// <summary>
    /// An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.</value>
    [DataMember(Name = "unicorn_matches", EmitDefaultValue = false), JsonPropertyName("unicorn_matches")]
    public IList<float>? UnicornMatches { get; set; }

    /// <summary>
    /// Average opposing switch denail percentage for the winning alliance during teleop.
    /// </summary>
    /// <value>Average opposing switch denail percentage for the winning alliance during teleop.</value>
    [DataMember(Name = "winning_opp_switch_denial_percentage_teleop", EmitDefaultValue = false), JsonPropertyName("winning_opp_switch_denial_percentage_teleop")]
    public float WinningOppSwitchDenialPercentageTeleop { get; set; }

    /// <summary>
    /// Average own switch ownership percentage for the winning alliance.
    /// </summary>
    /// <value>Average own switch ownership percentage for the winning alliance.</value>
    [DataMember(Name = "winning_own_switch_ownership_percentage", EmitDefaultValue = false), JsonPropertyName("winning_own_switch_ownership_percentage")]
    public float WinningOwnSwitchOwnershipPercentage { get; set; }

    /// <summary>
    /// Average own switch ownership percentage for the winning alliance during auto.
    /// </summary>
    /// <value>Average own switch ownership percentage for the winning alliance during auto.</value>
    [DataMember(Name = "winning_own_switch_ownership_percentage_auto", EmitDefaultValue = false), JsonPropertyName("winning_own_switch_ownership_percentage_auto")]
    public float WinningOwnSwitchOwnershipPercentageAuto { get; set; }

    /// <summary>
    /// Average own switch ownership percentage for the winning alliance during teleop.
    /// </summary>
    /// <value>Average own switch ownership percentage for the winning alliance during teleop.</value>
    [DataMember(Name = "winning_own_switch_ownership_percentage_teleop", EmitDefaultValue = false), JsonPropertyName("winning_own_switch_ownership_percentage_teleop")]
    public float WinningOwnSwitchOwnershipPercentageTeleop { get; set; }

    /// <summary>
    /// Average scale ownership percentage for the winning alliance.
    /// </summary>
    /// <value>Average scale ownership percentage for the winning alliance.</value>
    [DataMember(Name = "winning_scale_ownership_percentage", EmitDefaultValue = false), JsonPropertyName("winning_scale_ownership_percentage")]
    public float WinningScaleOwnershipPercentage { get; set; }

    /// <summary>
    /// Average scale ownership percentage for the winning alliance during auto.
    /// </summary>
    /// <value>Average scale ownership percentage for the winning alliance during auto.</value>
    [DataMember(Name = "winning_scale_ownership_percentage_auto", EmitDefaultValue = false), JsonPropertyName("winning_scale_ownership_percentage_auto")]
    public float WinningScaleOwnershipPercentageAuto { get; set; }

    /// <summary>
    /// Average scale ownership percentage for the winning alliance during teleop.
    /// </summary>
    /// <value>Average scale ownership percentage for the winning alliance during teleop.</value>
    [DataMember(Name = "winning_scale_ownership_percentage_teleop", EmitDefaultValue = false), JsonPropertyName("winning_scale_ownership_percentage_teleop")]
    public float WinningScaleOwnershipPercentageTeleop { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class EventInsights2018 {\n");
        sb.Append("  AutoQuestAchieved: ").Append(this.AutoQuestAchieved).Append('\n');
        sb.Append("  AverageBoostPlayed: ").Append(this.AverageBoostPlayed).Append('\n');
        sb.Append("  AverageEndgamePoints: ").Append(this.AverageEndgamePoints).Append('\n');
        sb.Append("  AverageForcePlayed: ").Append(this.AverageForcePlayed).Append('\n');
        sb.Append("  AverageFoulScore: ").Append(this.AverageFoulScore).Append('\n');
        sb.Append("  AveragePointsAuto: ").Append(this.AveragePointsAuto).Append('\n');
        sb.Append("  AveragePointsTeleop: ").Append(this.AveragePointsTeleop).Append('\n');
        sb.Append("  AverageRunPointsAuto: ").Append(this.AverageRunPointsAuto).Append('\n');
        sb.Append("  AverageScaleOwnershipPoints: ").Append(this.AverageScaleOwnershipPoints).Append('\n');
        sb.Append("  AverageScaleOwnershipPointsAuto: ").Append(this.AverageScaleOwnershipPointsAuto).Append('\n');
        sb.Append("  AverageScaleOwnershipPointsTeleop: ").Append(this.AverageScaleOwnershipPointsTeleop).Append('\n');
        sb.Append("  AverageScore: ").Append(this.AverageScore).Append('\n');
        sb.Append("  AverageSwitchOwnershipPoints: ").Append(this.AverageSwitchOwnershipPoints).Append('\n');
        sb.Append("  AverageSwitchOwnershipPointsAuto: ").Append(this.AverageSwitchOwnershipPointsAuto).Append('\n');
        sb.Append("  AverageSwitchOwnershipPointsTeleop: ").Append(this.AverageSwitchOwnershipPointsTeleop).Append('\n');
        sb.Append("  AverageVaultPoints: ").Append(this.AverageVaultPoints).Append('\n');
        sb.Append("  AverageWinMargin: ").Append(this.AverageWinMargin).Append('\n');
        sb.Append("  AverageWinScore: ").Append(this.AverageWinScore).Append('\n');
        sb.Append("  BoostPlayedCounts: ").Append(this.BoostPlayedCounts).Append('\n');
        sb.Append("  ClimbCounts: ").Append(this.ClimbCounts).Append('\n');
        sb.Append("  FaceTheBossAchieved: ").Append(this.FaceTheBossAchieved).Append('\n');
        sb.Append("  ForcePlayedCounts: ").Append(this.ForcePlayedCounts).Append('\n');
        sb.Append("  HighScore: ").Append(this.HighScore).Append('\n');
        sb.Append("  LevitatePlayedCounts: ").Append(this.LevitatePlayedCounts).Append('\n');
        sb.Append("  RunCountsAuto: ").Append(this.RunCountsAuto).Append('\n');
        sb.Append("  ScaleNeutralPercentage: ").Append(this.ScaleNeutralPercentage).Append('\n');
        sb.Append("  ScaleNeutralPercentageAuto: ").Append(this.ScaleNeutralPercentageAuto).Append('\n');
        sb.Append("  ScaleNeutralPercentageTeleop: ").Append(this.ScaleNeutralPercentageTeleop).Append('\n');
        sb.Append("  SwitchOwnedCountsAuto: ").Append(this.SwitchOwnedCountsAuto).Append('\n');
        sb.Append("  UnicornMatches: ").Append(this.UnicornMatches).Append('\n');
        sb.Append("  WinningOppSwitchDenialPercentageTeleop: ").Append(this.WinningOppSwitchDenialPercentageTeleop).Append('\n');
        sb.Append("  WinningOwnSwitchOwnershipPercentage: ").Append(this.WinningOwnSwitchOwnershipPercentage).Append('\n');
        sb.Append("  WinningOwnSwitchOwnershipPercentageAuto: ").Append(this.WinningOwnSwitchOwnershipPercentageAuto).Append('\n');
        sb.Append("  WinningOwnSwitchOwnershipPercentageTeleop: ").Append(this.WinningOwnSwitchOwnershipPercentageTeleop).Append('\n');
        sb.Append("  WinningScaleOwnershipPercentage: ").Append(this.WinningScaleOwnershipPercentage).Append('\n');
        sb.Append("  WinningScaleOwnershipPercentageAuto: ").Append(this.WinningScaleOwnershipPercentageAuto).Append('\n');
        sb.Append("  WinningScaleOwnershipPercentageTeleop: ").Append(this.WinningScaleOwnershipPercentageTeleop).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.AutoQuestAchieved is not null)
            {
                hashCode = (hashCode * 59) + this.AutoQuestAchieved.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.AverageBoostPlayed.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageEndgamePoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageForcePlayed.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageFoulScore.GetHashCode();
            hashCode = (hashCode * 59) + this.AveragePointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AveragePointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageRunPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageScaleOwnershipPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageScaleOwnershipPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageScaleOwnershipPointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageScore.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageSwitchOwnershipPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageSwitchOwnershipPointsAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageSwitchOwnershipPointsTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageVaultPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageWinMargin.GetHashCode();
            hashCode = (hashCode * 59) + this.AverageWinScore.GetHashCode();
            if (this.BoostPlayedCounts is not null)
            {
                hashCode = (hashCode * 59) + this.BoostPlayedCounts.GetHashCode();
            }

            if (this.ClimbCounts is not null)
            {
                hashCode = (hashCode * 59) + this.ClimbCounts.GetHashCode();
            }

            if (this.FaceTheBossAchieved is not null)
            {
                hashCode = (hashCode * 59) + this.FaceTheBossAchieved.GetHashCode();
            }

            if (this.ForcePlayedCounts is not null)
            {
                hashCode = (hashCode * 59) + this.ForcePlayedCounts.GetHashCode();
            }

            if (this.HighScore is not null)
            {
                hashCode = (hashCode * 59) + this.HighScore.GetHashCode();
            }

            if (this.LevitatePlayedCounts is not null)
            {
                hashCode = (hashCode * 59) + this.LevitatePlayedCounts.GetHashCode();
            }

            if (this.RunCountsAuto is not null)
            {
                hashCode = (hashCode * 59) + this.RunCountsAuto.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.ScaleNeutralPercentage.GetHashCode();
            hashCode = (hashCode * 59) + this.ScaleNeutralPercentageAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.ScaleNeutralPercentageTeleop.GetHashCode();
            if (this.SwitchOwnedCountsAuto is not null)
            {
                hashCode = (hashCode * 59) + this.SwitchOwnedCountsAuto.GetHashCode();
            }

            if (this.UnicornMatches is not null)
            {
                hashCode = (hashCode * 59) + this.UnicornMatches.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.WinningOppSwitchDenialPercentageTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningOwnSwitchOwnershipPercentage.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningOwnSwitchOwnershipPercentageAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningOwnSwitchOwnershipPercentageTeleop.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningScaleOwnershipPercentage.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningScaleOwnershipPercentageAuto.GetHashCode();
            hashCode = (hashCode * 59) + this.WinningScaleOwnershipPercentageTeleop.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
