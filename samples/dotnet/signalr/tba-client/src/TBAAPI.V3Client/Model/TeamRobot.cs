/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// TeamRobot
/// </summary>
[DataContract]
public partial record TeamRobot : IValidatableObject
{
    /// <summary>
    /// Year this robot competed in.
    /// </summary>
    /// <value>Year this robot competed in.</value>
    [DataMember(Name = "year", EmitDefaultValue = false), JsonPropertyName("year")]
    public int Year { get; set; }

    /// <summary>
    /// Name of the robot as provided by the team.
    /// </summary>
    /// <value>Name of the robot as provided by the team.</value>
    [DataMember(Name = "robot_name", EmitDefaultValue = false), JsonPropertyName("robot_name")]
    public string? RobotName { get; set; }

    /// <summary>
    /// Internal TBA identifier for this robot.
    /// </summary>
    /// <value>Internal TBA identifier for this robot.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string? Key { get; set; }

    /// <summary>
    /// TBA team key for this robot.
    /// </summary>
    /// <value>TBA team key for this robot.</value>
    [DataMember(Name = "team_key", EmitDefaultValue = false), JsonPropertyName("team_key")]
    public string? TeamKey { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TeamRobot {\n");
        sb.Append("  Year: ").Append(this.Year).Append('\n');
        sb.Append("  RobotName: ").Append(this.RobotName).Append('\n');
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  TeamKey: ").Append(this.TeamKey).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.Year.GetHashCode();
            if (this.RobotName is not null)
            {
                hashCode = (hashCode * 59) + this.RobotName.GetHashCode();
            }

            if (this.Key is not null)
            {
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
            }

            if (this.TeamKey is not null)
            {
                hashCode = (hashCode * 59) + this.TeamKey.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
