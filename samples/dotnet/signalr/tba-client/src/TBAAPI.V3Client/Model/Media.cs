/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// The 'Media' object contains a reference for most any media associated with a team or event on TBA.
/// </summary>
[DataContract]
public partial record Media : IValidatableObject
{
    /// <summary>
    /// String type of the media element.
    /// </summary>
    /// <value>String type of the media element.</value>
    [DataMember(Name = "type", EmitDefaultValue = false), JsonPropertyName("type")]
    public TypeEnum Type { get; set; }

    /// <summary>
    /// The key used to identify this media on the media site.
    /// </summary>
    /// <value>The key used to identify this media on the media site.</value>
    [DataMember(Name = "foreign_key", EmitDefaultValue = false), JsonPropertyName("foreign_key")]
    public string? ForeignKey { get; set; }

    /// <summary>
    /// If required, a JSON dict of additional media information.
    /// </summary>
    /// <value>If required, a JSON dict of additional media information.</value>
    [DataMember(Name = "details", EmitDefaultValue = false), JsonPropertyName("details")]
    public object? Details { get; set; }

    /// <summary>
    /// True if the media is of high quality.
    /// </summary>
    /// <value>True if the media is of high quality.</value>
    [DataMember(Name = "preferred", EmitDefaultValue = false), JsonPropertyName("preferred")]
    public bool Preferred { get; set; }

    /// <summary>
    /// Direct URL to the media.
    /// </summary>
    /// <value>Direct URL to the media.</value>
    [DataMember(Name = "direct_url", EmitDefaultValue = false), JsonPropertyName("direct_url")]
    public string? DirectUrl { get; set; }

    /// <summary>
    /// The URL that leads to the full web page for the media, if one exists.
    /// </summary>
    /// <value>The URL that leads to the full web page for the media, if one exists.</value>
    [DataMember(Name = "view_url", EmitDefaultValue = false), JsonPropertyName("view_url")]
    public string? ViewUrl { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Media {\n");
        sb.Append("  Type: ").Append(this.Type).Append('\n');
        sb.Append("  ForeignKey: ").Append(this.ForeignKey).Append('\n');
        sb.Append("  Details: ").Append(this.Details).Append('\n');
        sb.Append("  Preferred: ").Append(this.Preferred).Append('\n');
        sb.Append("  DirectUrl: ").Append(this.DirectUrl).Append('\n');
        sb.Append("  ViewUrl: ").Append(this.ViewUrl).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.Type.GetHashCode();
            if (this.ForeignKey is not null)
            {
                hashCode = (hashCode * 59) + this.ForeignKey.GetHashCode();
            }

            if (this.Details is not null)
            {
                hashCode = (hashCode * 59) + this.Details.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.Preferred.GetHashCode();
            if (this.DirectUrl is not null)
            {
                hashCode = (hashCode * 59) + this.DirectUrl.GetHashCode();
            }

            if (this.ViewUrl is not null)
            {
                hashCode = (hashCode * 59) + this.ViewUrl.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
