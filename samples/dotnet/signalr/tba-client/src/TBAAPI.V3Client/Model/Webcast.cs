/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// Webcast
/// </summary>
[DataContract]
public partial record Webcast : IValidatableObject
{
    /// <summary>
    /// Type of webcast, typically descriptive of the streaming provider.
    /// </summary>
    /// <value>Type of webcast, typically descriptive of the streaming provider.</value>
    [DataMember(Name = "type", EmitDefaultValue = false), JsonPropertyName("type")]
    public TypeEnum Type { get; set; }

    /// <summary>
    /// Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
    /// </summary>
    /// <value>Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.</value>
    [DataMember(Name = "channel", EmitDefaultValue = false), JsonPropertyName("channel")]
    public string? Channel { get; set; }

    /// <summary>
    /// The date for the webcast in 'yyyy-mm-dd' format. May be null.
    /// </summary>
    /// <value>The date for the webcast in 'yyyy-mm-dd' format. May be null.</value>
    [DataMember(Name = "date", EmitDefaultValue = false), JsonPropertyName("date")]
    public string? Date { get; set; }

    /// <summary>
    /// File identification as may be required for some types. May be null.
    /// </summary>
    /// <value>File identification as may be required for some types. May be null.</value>
    [DataMember(Name = "file", EmitDefaultValue = false), JsonPropertyName("file")]
    public string? File { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Webcast {\n");
        sb.Append("  Type: ").Append(this.Type).Append('\n');
        sb.Append("  Channel: ").Append(this.Channel).Append('\n');
        sb.Append("  Date: ").Append(this.Date).Append('\n');
        sb.Append("  File: ").Append(this.File).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.Type.GetHashCode();
            if (this.Channel is not null)
            {
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
            }

            if (this.Date is not null)
            {
                hashCode = (hashCode * 59) + this.Date.GetHashCode();
            }

            if (this.File is not null)
            {
                hashCode = (hashCode * 59) + this.File.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
