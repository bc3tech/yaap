/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// TeamSimple
/// </summary>
[DataContract]
public partial record TeamSimple : IValidatableObject
{
    /// <summary>
    /// TBA team key with the format 'frcXXXX' with 'XXXX' representing the team number.
    /// </summary>
    /// <value>TBA team key with the format 'frcXXXX' with 'XXXX' representing the team number.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string? Key { get; set; }

    /// <summary>
    /// Official team number issued by FIRST.
    /// </summary>
    /// <value>Official team number issued by FIRST.</value>
    [DataMember(Name = "team_number", EmitDefaultValue = false), JsonPropertyName("team_number")]
    public int TeamNumber { get; set; }

    /// <summary>
    /// Team nickname provided by FIRST.
    /// </summary>
    /// <value>Team nickname provided by FIRST.</value>
    [DataMember(Name = "nickname", EmitDefaultValue = false), JsonPropertyName("nickname")]
    public string? Nickname { get; set; }

    /// <summary>
    /// Official long name registered with FIRST.
    /// </summary>
    /// <value>Official long name registered with FIRST.</value>
    [DataMember(Name = "name", EmitDefaultValue = false), JsonPropertyName("name")]
    public string? Name { get; set; }

    /// <summary>
    /// City of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>City of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "city", EmitDefaultValue = false), JsonPropertyName("city")]
    public string? City { get; set; }

    /// <summary>
    /// State of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>State of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "state_prov", EmitDefaultValue = false), JsonPropertyName("state_prov")]
    public string? StateProv { get; set; }

    /// <summary>
    /// Country of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>Country of team derived from parsing the address registered with FIRST.</value>
    [DataMember(Name = "country", EmitDefaultValue = false), JsonPropertyName("country")]
    public string? Country { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TeamSimple {\n");
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  TeamNumber: ").Append(this.TeamNumber).Append('\n');
        sb.Append("  Nickname: ").Append(this.Nickname).Append('\n');
        sb.Append("  Name: ").Append(this.Name).Append('\n');
        sb.Append("  City: ").Append(this.City).Append('\n');
        sb.Append("  StateProv: ").Append(this.StateProv).Append('\n');
        sb.Append("  Country: ").Append(this.Country).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Key is not null)
            {
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.TeamNumber.GetHashCode();
            if (this.Nickname is not null)
            {
                hashCode = (hashCode * 59) + this.Nickname.GetHashCode();
            }

            if (this.Name is not null)
            {
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
            }

            if (this.City is not null)
            {
                hashCode = (hashCode * 59) + this.City.GetHashCode();
            }

            if (this.StateProv is not null)
            {
                hashCode = (hashCode * 59) + this.StateProv.GetHashCode();
            }

            if (this.Country is not null)
            {
                hashCode = (hashCode * 59) + this.Country.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
