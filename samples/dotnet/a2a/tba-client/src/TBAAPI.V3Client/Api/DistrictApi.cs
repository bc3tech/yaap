/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Api;

using System;
using System.Collections.Generic;
using System.ComponentModel;

using Microsoft.SemanticKernel;

using TBAAPI.V3Client.Client;
using TBAAPI.V3Client.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class DistrictApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="DistrictApi"/> class.
    /// </summary>
    /// <returns></returns>
    public DistrictApi(string basePath)
    {
        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="DistrictApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public DistrictApi(Configuration configuration)
    {
        ArgumentNullException.ThrowIfNull(configuration);

        this.Configuration = V3Client.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        this.Client = new ApiClient(this.Configuration.BasePath);
        this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="DistrictApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public DistrictApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        ArgumentNullException.ThrowIfNull(client);
        ArgumentNullException.ThrowIfNull(asyncClient);
        ArgumentNullException.ThrowIfNull(configuration);

        this.Client = client;
        this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = V3Client.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => this.Configuration.BasePath;

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get => _exceptionFactory.GetInvocationList().Length > 1
                ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
                : _exceptionFactory;
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetDistrictEventsKeys(string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo(string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of event keys for events in the given district.")]
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetDistrictEventsKeysAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfoAsync(districtKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of event keys for events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/events/keys", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;DistrictRanking&gt;</returns>
    public IList<DistrictRanking>? GetDistrictRankings(string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictRanking>> localVarResponse = GetDistrictRankingsWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
    public ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo(string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<DistrictRanking>> localVarResponse = this.Client.Get<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
    [KernelFunction, Description("Gets a list of team district rankings for the given district.")]
    [return: Description("List of DistrictRanking values, possibly null")]
    public async Task<List<DistrictRanking>?> GetDistrictRankingsAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictRanking>> localVarResponse = await GetDistrictRankingsAsyncWithHttpInfoAsync(districtKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of team district rankings for the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
    [return: Description("Task of ApiResponse (List<DistrictRanking>)")]
    public async Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictRankings");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<DistrictRanking>> localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictRanking>>("/district/{district_key}/rankings", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictRankings", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;string&gt;</returns>
    public IList<string>? GetDistrictTeamsKeys(string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = GetDistrictTeamsKeysWithHttpInfo(districtKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo(string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<string>> localVarResponse = this.Client.Get<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    [KernelFunction, Description("Gets a list of 'Team' objects that competed in events in the given district.")]
    [return: Description("List of string values, possibly null")]
    public async Task<List<string>?> GetDistrictTeamsKeysAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<string>> localVarResponse = await GetDistrictTeamsKeysAsyncWithHttpInfoAsync(districtKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of 'Team' objects that competed in events in the given district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="districtKey">TBA District Key, eg '2016fim'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    [return: Description("Task of ApiResponse (List<string>)")]
    public async Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfoAsync(
        [Description("District Key, eg '2016fim'")] string districtKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'districtKey' is set
        if (districtKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsKeys");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("district_key", districtKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<string>> localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/district/{district_key}/teams/keys", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of districts and their corresponding district key, for the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;DistrictList&gt;</returns>
    public IList<DistrictList>? GetDistrictsByYear(int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictList>> localVarResponse = GetDistrictsByYearWithHttpInfo(year, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of districts and their corresponding district key, for the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
    public ApiResponse<List<DistrictList>> GetDistrictsByYearWithHttpInfo(int year,
         string? ifModifiedSince = default)
    {
        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<DistrictList>> localVarResponse = this.Client.Get<List<DistrictList>>("/districts/{year}", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of districts and their corresponding district key, for the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;DistrictList&gt;</returns>
    [KernelFunction, Description("Gets a list of districts and their corresponding district key, for the given year.")]
    [return: Description("List of DistrictList values, possibly null")]
    public async Task<List<DistrictList>?> GetDistrictsByYearAsync(int year,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictList>> localVarResponse = await GetDistrictsByYearAsyncWithHttpInfoAsync(year, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets a list of districts and their corresponding district key, for the given year.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
    [return: Description("Task of ApiResponse (List<DistrictList>)")]
    public async Task<ApiResponse<List<DistrictList>>> GetDistrictsByYearAsyncWithHttpInfoAsync(int year,
         string? ifModifiedSince = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("year", year.ToString()); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<DistrictList>> localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictList>>("/districts/{year}", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetDistrictsByYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>List&lt;DistrictList&gt;</returns>
    public IList<DistrictList>? GetTeamDistricts(string teamKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictList>> localVarResponse = GetTeamDistrictsWithHttpInfo(teamKey, ifModifiedSince);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
    public ApiResponse<List<DistrictList>> GetTeamDistrictsWithHttpInfo(string teamKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling DistrictApi->GetTeamDistricts");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request
        ApiResponse<List<DistrictList>> localVarResponse = this.Client.Get<List<DistrictList>>("/team/{team_key}/districts", localVarRequestOptions, this.Configuration);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamDistricts", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of List&lt;DistrictList&gt;</returns>
    [KernelFunction, Description("Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.")]
    [return: Description("List of DistrictList values, possibly null")]
    public async Task<List<DistrictList>?> GetTeamDistrictsAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
         string? ifModifiedSince = default)
    {
        ApiResponse<List<DistrictList>> localVarResponse = await GetTeamDistrictsAsyncWithHttpInfoAsync(teamKey, ifModifiedSince).ConfigureAwait(false);
        return localVarResponse.Data;

    }

    /// <summary>
    ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="teamKey">TBA Team Key, eg 'frc254'</param>
    /// <param name="ifModifiedSince">Value of the 'Last-Modified' header in the most recently cached response by the client. (optional)</param>
    /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
    [return: Description("Task of ApiResponse (List<DistrictList>)")]
    public async Task<ApiResponse<List<DistrictList>>> GetTeamDistrictsAsyncWithHttpInfoAsync(
        [Description("Team Key, eg 'frc254'")] string teamKey,
         string? ifModifiedSince = default)
    {
        // verify the required parameter 'teamKey' is set
        if (teamKey is null)
        {
            throw new ApiException(400, "Missing required parameter 'teamKey' when calling DistrictApi->GetTeamDistricts");
        }

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        foreach (var _contentType in _contentTypes)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
        }

        foreach (var _accept in _accepts)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
        }

        localVarRequestOptions.PathParameters.Add("team_key", teamKey); // path parameter
        if (ifModifiedSince is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        ApiResponse<List<DistrictList>> localVarResponse = await this.AsynchronousClient.GetAsync<List<DistrictList>>("/team/{team_key}/districts", localVarRequestOptions, this.Configuration).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception? _exception = this.ExceptionFactory("GetTeamDistricts", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
