/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// MatchScoreBreakdown2017Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2017Alliance" /> class.
/// </remarks>
[DataContract]
public partial record MatchScoreBreakdown2017Alliance : IValidatableObject
{
    /// <summary>
    /// Defines Robot1Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot1AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot1Auto
    /// </summary>
    [DataMember(Name = "robot1Auto", EmitDefaultValue = false), JsonPropertyName("robot1Auto")]
    public Robot1AutoEnum? Robot1Auto { get; set; }
    /// <summary>
    /// Defines Robot2Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot2AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot2Auto
    /// </summary>
    [DataMember(Name = "robot2Auto", EmitDefaultValue = false), JsonPropertyName("robot2Auto")]
    public Robot2AutoEnum? Robot2Auto { get; set; }
    /// <summary>
    /// Defines Robot3Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum Robot3AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 1,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3

    }

    /// <summary>
    /// Gets or Sets Robot3Auto
    /// </summary>
    [DataMember(Name = "robot3Auto", EmitDefaultValue = false), JsonPropertyName("robot3Auto")]
    public Robot3AutoEnum? Robot3Auto { get; set; }

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>
    [DataMember(Name = "autoPoints", EmitDefaultValue = false), JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>
    [DataMember(Name = "teleopPoints", EmitDefaultValue = false), JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; }

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>
    [DataMember(Name = "foulPoints", EmitDefaultValue = false), JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; }

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>
    [DataMember(Name = "adjustPoints", EmitDefaultValue = false), JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; }

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>
    [DataMember(Name = "totalPoints", EmitDefaultValue = false), JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; }

    /// <summary>
    /// Gets or Sets Rotor1Auto
    /// </summary>
    [DataMember(Name = "rotor1Auto", EmitDefaultValue = false), JsonPropertyName("rotor1Auto")]
    public bool Rotor1Auto { get; set; }

    /// <summary>
    /// Gets or Sets Rotor2Auto
    /// </summary>
    [DataMember(Name = "rotor2Auto", EmitDefaultValue = false), JsonPropertyName("rotor2Auto")]
    public bool Rotor2Auto { get; set; }

    /// <summary>
    /// Gets or Sets AutoFuelLow
    /// </summary>
    [DataMember(Name = "autoFuelLow", EmitDefaultValue = false), JsonPropertyName("autoFuelLow")]
    public int AutoFuelLow { get; set; }

    /// <summary>
    /// Gets or Sets AutoFuelHigh
    /// </summary>
    [DataMember(Name = "autoFuelHigh", EmitDefaultValue = false), JsonPropertyName("autoFuelHigh")]
    public int AutoFuelHigh { get; set; }

    /// <summary>
    /// Gets or Sets AutoMobilityPoints
    /// </summary>
    [DataMember(Name = "autoMobilityPoints", EmitDefaultValue = false), JsonPropertyName("autoMobilityPoints")]
    public int AutoMobilityPoints { get; set; }

    /// <summary>
    /// Gets or Sets AutoRotorPoints
    /// </summary>
    [DataMember(Name = "autoRotorPoints", EmitDefaultValue = false), JsonPropertyName("autoRotorPoints")]
    public int AutoRotorPoints { get; set; }

    /// <summary>
    /// Gets or Sets AutoFuelPoints
    /// </summary>
    [DataMember(Name = "autoFuelPoints", EmitDefaultValue = false), JsonPropertyName("autoFuelPoints")]
    public int AutoFuelPoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopFuelPoints
    /// </summary>
    [DataMember(Name = "teleopFuelPoints", EmitDefaultValue = false), JsonPropertyName("teleopFuelPoints")]
    public int TeleopFuelPoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopFuelLow
    /// </summary>
    [DataMember(Name = "teleopFuelLow", EmitDefaultValue = false), JsonPropertyName("teleopFuelLow")]
    public int TeleopFuelLow { get; set; }

    /// <summary>
    /// Gets or Sets TeleopFuelHigh
    /// </summary>
    [DataMember(Name = "teleopFuelHigh", EmitDefaultValue = false), JsonPropertyName("teleopFuelHigh")]
    public int TeleopFuelHigh { get; set; }

    /// <summary>
    /// Gets or Sets TeleopRotorPoints
    /// </summary>
    [DataMember(Name = "teleopRotorPoints", EmitDefaultValue = false), JsonPropertyName("teleopRotorPoints")]
    public int TeleopRotorPoints { get; set; }

    /// <summary>
    /// Gets or Sets KPaRankingPointAchieved
    /// </summary>
    [DataMember(Name = "kPaRankingPointAchieved", EmitDefaultValue = false), JsonPropertyName("kPaRankingPointAchieved")]
    public bool KPaRankingPointAchieved { get; set; }

    /// <summary>
    /// Gets or Sets TeleopTakeoffPoints
    /// </summary>
    [DataMember(Name = "teleopTakeoffPoints", EmitDefaultValue = false), JsonPropertyName("teleopTakeoffPoints")]
    public int TeleopTakeoffPoints { get; set; }

    /// <summary>
    /// Gets or Sets KPaBonusPoints
    /// </summary>
    [DataMember(Name = "kPaBonusPoints", EmitDefaultValue = false), JsonPropertyName("kPaBonusPoints")]
    public int KPaBonusPoints { get; set; }

    /// <summary>
    /// Gets or Sets RotorBonusPoints
    /// </summary>
    [DataMember(Name = "rotorBonusPoints", EmitDefaultValue = false), JsonPropertyName("rotorBonusPoints")]
    public int RotorBonusPoints { get; set; }

    /// <summary>
    /// Gets or Sets Rotor1Engaged
    /// </summary>
    [DataMember(Name = "rotor1Engaged", EmitDefaultValue = false), JsonPropertyName("rotor1Engaged")]
    public bool Rotor1Engaged { get; set; }

    /// <summary>
    /// Gets or Sets Rotor2Engaged
    /// </summary>
    [DataMember(Name = "rotor2Engaged", EmitDefaultValue = false), JsonPropertyName("rotor2Engaged")]
    public bool Rotor2Engaged { get; set; }

    /// <summary>
    /// Gets or Sets Rotor3Engaged
    /// </summary>
    [DataMember(Name = "rotor3Engaged", EmitDefaultValue = false), JsonPropertyName("rotor3Engaged")]
    public bool Rotor3Engaged { get; set; }

    /// <summary>
    /// Gets or Sets Rotor4Engaged
    /// </summary>
    [DataMember(Name = "rotor4Engaged", EmitDefaultValue = false), JsonPropertyName("rotor4Engaged")]
    public bool Rotor4Engaged { get; set; }

    /// <summary>
    /// Gets or Sets RotorRankingPointAchieved
    /// </summary>
    [DataMember(Name = "rotorRankingPointAchieved", EmitDefaultValue = false), JsonPropertyName("rotorRankingPointAchieved")]
    public bool RotorRankingPointAchieved { get; set; }

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>
    [DataMember(Name = "techFoulCount", EmitDefaultValue = false), JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; }

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>
    [DataMember(Name = "foulCount", EmitDefaultValue = false), JsonPropertyName("foulCount")]
    public int FoulCount { get; set; }

    /// <summary>
    /// Gets or Sets TouchpadNear
    /// </summary>
    [DataMember(Name = "touchpadNear", EmitDefaultValue = false), JsonPropertyName("touchpadNear")]
    public string? TouchpadNear { get; set; }

    /// <summary>
    /// Gets or Sets TouchpadMiddle
    /// </summary>
    [DataMember(Name = "touchpadMiddle", EmitDefaultValue = false), JsonPropertyName("touchpadMiddle")]
    public string? TouchpadMiddle { get; set; }

    /// <summary>
    /// Gets or Sets TouchpadFar
    /// </summary>
    [DataMember(Name = "touchpadFar", EmitDefaultValue = false), JsonPropertyName("touchpadFar")]
    public string? TouchpadFar { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MatchScoreBreakdown2017Alliance {\n");
        sb.Append("  AutoPoints: ").Append(this.AutoPoints).Append('\n');
        sb.Append("  TeleopPoints: ").Append(this.TeleopPoints).Append('\n');
        sb.Append("  FoulPoints: ").Append(this.FoulPoints).Append('\n');
        sb.Append("  AdjustPoints: ").Append(this.AdjustPoints).Append('\n');
        sb.Append("  TotalPoints: ").Append(this.TotalPoints).Append('\n');
        sb.Append("  Robot1Auto: ").Append(this.Robot1Auto).Append('\n');
        sb.Append("  Robot2Auto: ").Append(this.Robot2Auto).Append('\n');
        sb.Append("  Robot3Auto: ").Append(this.Robot3Auto).Append('\n');
        sb.Append("  Rotor1Auto: ").Append(this.Rotor1Auto).Append('\n');
        sb.Append("  Rotor2Auto: ").Append(this.Rotor2Auto).Append('\n');
        sb.Append("  AutoFuelLow: ").Append(this.AutoFuelLow).Append('\n');
        sb.Append("  AutoFuelHigh: ").Append(this.AutoFuelHigh).Append('\n');
        sb.Append("  AutoMobilityPoints: ").Append(this.AutoMobilityPoints).Append('\n');
        sb.Append("  AutoRotorPoints: ").Append(this.AutoRotorPoints).Append('\n');
        sb.Append("  AutoFuelPoints: ").Append(this.AutoFuelPoints).Append('\n');
        sb.Append("  TeleopFuelPoints: ").Append(this.TeleopFuelPoints).Append('\n');
        sb.Append("  TeleopFuelLow: ").Append(this.TeleopFuelLow).Append('\n');
        sb.Append("  TeleopFuelHigh: ").Append(this.TeleopFuelHigh).Append('\n');
        sb.Append("  TeleopRotorPoints: ").Append(this.TeleopRotorPoints).Append('\n');
        sb.Append("  KPaRankingPointAchieved: ").Append(this.KPaRankingPointAchieved).Append('\n');
        sb.Append("  TeleopTakeoffPoints: ").Append(this.TeleopTakeoffPoints).Append('\n');
        sb.Append("  KPaBonusPoints: ").Append(this.KPaBonusPoints).Append('\n');
        sb.Append("  RotorBonusPoints: ").Append(this.RotorBonusPoints).Append('\n');
        sb.Append("  Rotor1Engaged: ").Append(this.Rotor1Engaged).Append('\n');
        sb.Append("  Rotor2Engaged: ").Append(this.Rotor2Engaged).Append('\n');
        sb.Append("  Rotor3Engaged: ").Append(this.Rotor3Engaged).Append('\n');
        sb.Append("  Rotor4Engaged: ").Append(this.Rotor4Engaged).Append('\n');
        sb.Append("  RotorRankingPointAchieved: ").Append(this.RotorRankingPointAchieved).Append('\n');
        sb.Append("  TechFoulCount: ").Append(this.TechFoulCount).Append('\n');
        sb.Append("  FoulCount: ").Append(this.FoulCount).Append('\n');
        sb.Append("  TouchpadNear: ").Append(this.TouchpadNear).Append('\n');
        sb.Append("  TouchpadMiddle: ").Append(this.TouchpadMiddle).Append('\n');
        sb.Append("  TouchpadFar: ").Append(this.TouchpadFar).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = (hashCode * 59) + this.AutoPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AdjustPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TotalPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot1Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot2Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Robot3Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor1Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor2Auto.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelLow.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelHigh.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoMobilityPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoRotorPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoFuelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelLow.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopFuelHigh.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopRotorPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.KPaRankingPointAchieved.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopTakeoffPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.KPaBonusPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.RotorBonusPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor1Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor2Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor3Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.Rotor4Engaged.GetHashCode();
            hashCode = (hashCode * 59) + this.RotorRankingPointAchieved.GetHashCode();
            hashCode = (hashCode * 59) + this.TechFoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulCount.GetHashCode();
            if (this.TouchpadNear is not null)
            {
                hashCode = (hashCode * 59) + this.TouchpadNear.GetHashCode();
            }

            if (this.TouchpadMiddle is not null)
            {
                hashCode = (hashCode * 59) + this.TouchpadMiddle.GetHashCode();
            }

            if (this.TouchpadFar is not null)
            {
                hashCode = (hashCode * 59) + this.TouchpadFar.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
