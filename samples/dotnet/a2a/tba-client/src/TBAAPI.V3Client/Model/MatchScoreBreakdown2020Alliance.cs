/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
/// <summary>
/// MatchScoreBreakdown2020Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2020Alliance" /> class.
/// </remarks>
[DataContract]
public partial record MatchScoreBreakdown2020Alliance : IValidatableObject
{

    /// <summary>
    /// Gets or Sets InitLineRobot1
    /// </summary>
    [DataMember(Name = "initLineRobot1", EmitDefaultValue = false), JsonPropertyName("initLineRobot1")]
    public string? InitLineRobot1 { get; set; }

    /// <summary>
    /// Gets or Sets EndgameRobot1
    /// </summary>
    [DataMember(Name = "endgameRobot1", EmitDefaultValue = false), JsonPropertyName("endgameRobot1")]
    public string? EndgameRobot1 { get; set; }

    /// <summary>
    /// Gets or Sets InitLineRobot2
    /// </summary>
    [DataMember(Name = "initLineRobot2", EmitDefaultValue = false), JsonPropertyName("initLineRobot2")]
    public string? InitLineRobot2 { get; set; }

    /// <summary>
    /// Gets or Sets EndgameRobot2
    /// </summary>
    [DataMember(Name = "endgameRobot2", EmitDefaultValue = false), JsonPropertyName("endgameRobot2")]
    public string? EndgameRobot2 { get; set; }

    /// <summary>
    /// Gets or Sets InitLineRobot3
    /// </summary>
    [DataMember(Name = "initLineRobot3", EmitDefaultValue = false), JsonPropertyName("initLineRobot3")]
    public string? InitLineRobot3 { get; set; }

    /// <summary>
    /// Gets or Sets EndgameRobot3
    /// </summary>
    [DataMember(Name = "endgameRobot3", EmitDefaultValue = false), JsonPropertyName("endgameRobot3")]
    public string? EndgameRobot3 { get; set; }

    /// <summary>
    /// Gets or Sets AutoCellsBottom
    /// </summary>
    [DataMember(Name = "autoCellsBottom", EmitDefaultValue = false), JsonPropertyName("autoCellsBottom")]
    public int AutoCellsBottom { get; set; }

    /// <summary>
    /// Gets or Sets AutoCellsOuter
    /// </summary>
    [DataMember(Name = "autoCellsOuter", EmitDefaultValue = false), JsonPropertyName("autoCellsOuter")]
    public int AutoCellsOuter { get; set; }

    /// <summary>
    /// Gets or Sets AutoCellsInner
    /// </summary>
    [DataMember(Name = "autoCellsInner", EmitDefaultValue = false), JsonPropertyName("autoCellsInner")]
    public int AutoCellsInner { get; set; }

    /// <summary>
    /// Gets or Sets TeleopCellsBottom
    /// </summary>
    [DataMember(Name = "teleopCellsBottom", EmitDefaultValue = false), JsonPropertyName("teleopCellsBottom")]
    public int TeleopCellsBottom { get; set; }

    /// <summary>
    /// Gets or Sets TeleopCellsOuter
    /// </summary>
    [DataMember(Name = "teleopCellsOuter", EmitDefaultValue = false), JsonPropertyName("teleopCellsOuter")]
    public int TeleopCellsOuter { get; set; }

    /// <summary>
    /// Gets or Sets TeleopCellsInner
    /// </summary>
    [DataMember(Name = "teleopCellsInner", EmitDefaultValue = false), JsonPropertyName("teleopCellsInner")]
    public int TeleopCellsInner { get; set; }

    /// <summary>
    /// Gets or Sets Stage1Activated
    /// </summary>
    [DataMember(Name = "stage1Activated", EmitDefaultValue = false), JsonPropertyName("stage1Activated")]
    public bool Stage1Activated { get; set; }

    /// <summary>
    /// Gets or Sets Stage2Activated
    /// </summary>
    [DataMember(Name = "stage2Activated", EmitDefaultValue = false), JsonPropertyName("stage2Activated")]
    public bool Stage2Activated { get; set; }

    /// <summary>
    /// Gets or Sets Stage3Activated
    /// </summary>
    [DataMember(Name = "stage3Activated", EmitDefaultValue = false), JsonPropertyName("stage3Activated")]
    public bool Stage3Activated { get; set; }

    /// <summary>
    /// Gets or Sets Stage3TargetColor
    /// </summary>
    [DataMember(Name = "stage3TargetColor", EmitDefaultValue = false), JsonPropertyName("stage3TargetColor")]
    public string? Stage3TargetColor { get; set; }

    /// <summary>
    /// Gets or Sets EndgameRungIsLevel
    /// </summary>
    [DataMember(Name = "endgameRungIsLevel", EmitDefaultValue = false), JsonPropertyName("endgameRungIsLevel")]
    public string? EndgameRungIsLevel { get; set; }

    /// <summary>
    /// Gets or Sets AutoInitLinePoints
    /// </summary>
    [DataMember(Name = "autoInitLinePoints", EmitDefaultValue = false), JsonPropertyName("autoInitLinePoints")]
    public int AutoInitLinePoints { get; set; }

    /// <summary>
    /// Gets or Sets AutoCellPoints
    /// </summary>
    [DataMember(Name = "autoCellPoints", EmitDefaultValue = false), JsonPropertyName("autoCellPoints")]
    public int AutoCellPoints { get; set; }

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>
    [DataMember(Name = "autoPoints", EmitDefaultValue = false), JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopCellPoints
    /// </summary>
    [DataMember(Name = "teleopCellPoints", EmitDefaultValue = false), JsonPropertyName("teleopCellPoints")]
    public int TeleopCellPoints { get; set; }

    /// <summary>
    /// Gets or Sets ControlPanelPoints
    /// </summary>
    [DataMember(Name = "controlPanelPoints", EmitDefaultValue = false), JsonPropertyName("controlPanelPoints")]
    public int ControlPanelPoints { get; set; }

    /// <summary>
    /// Gets or Sets EndgamePoints
    /// </summary>
    [DataMember(Name = "endgamePoints", EmitDefaultValue = false), JsonPropertyName("endgamePoints")]
    public int EndgamePoints { get; set; }

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>
    [DataMember(Name = "teleopPoints", EmitDefaultValue = false), JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; }

    /// <summary>
    /// Gets or Sets ShieldOperationalRankingPoint
    /// </summary>
    [DataMember(Name = "shieldOperationalRankingPoint", EmitDefaultValue = false), JsonPropertyName("shieldOperationalRankingPoint")]
    public bool ShieldOperationalRankingPoint { get; set; }

    /// <summary>
    /// Gets or Sets ShieldEnergizedRankingPoint
    /// </summary>
    [DataMember(Name = "shieldEnergizedRankingPoint", EmitDefaultValue = false), JsonPropertyName("shieldEnergizedRankingPoint")]
    public bool ShieldEnergizedRankingPoint { get; set; }

    /// <summary>
    /// Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
    /// </summary>
    /// <value>Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.</value>
    [DataMember(Name = "tba_shieldEnergizedRankingPointFromFoul", EmitDefaultValue = false), JsonPropertyName("tba_shieldEnergizedRankingPointFromFoul")]
    public bool TbaShieldEnergizedRankingPointFromFoul { get; set; }

    /// <summary>
    /// Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
    /// </summary>
    /// <value>Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.</value>
    [DataMember(Name = "tba_numRobotsHanging", EmitDefaultValue = false), JsonPropertyName("tba_numRobotsHanging")]
    public int TbaNumRobotsHanging { get; set; }

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>
    [DataMember(Name = "foulCount", EmitDefaultValue = false), JsonPropertyName("foulCount")]
    public int FoulCount { get; set; }

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>
    [DataMember(Name = "techFoulCount", EmitDefaultValue = false), JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; }

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>
    [DataMember(Name = "adjustPoints", EmitDefaultValue = false), JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; }

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>
    [DataMember(Name = "foulPoints", EmitDefaultValue = false), JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; }

    /// <summary>
    /// Gets or Sets Rp
    /// </summary>
    [DataMember(Name = "rp", EmitDefaultValue = false), JsonPropertyName("rp")]
    public int Rp { get; set; }

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>
    [DataMember(Name = "totalPoints", EmitDefaultValue = false), JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MatchScoreBreakdown2020Alliance {\n");
        sb.Append("  InitLineRobot1: ").Append(this.InitLineRobot1).Append('\n');
        sb.Append("  EndgameRobot1: ").Append(this.EndgameRobot1).Append('\n');
        sb.Append("  InitLineRobot2: ").Append(this.InitLineRobot2).Append('\n');
        sb.Append("  EndgameRobot2: ").Append(this.EndgameRobot2).Append('\n');
        sb.Append("  InitLineRobot3: ").Append(this.InitLineRobot3).Append('\n');
        sb.Append("  EndgameRobot3: ").Append(this.EndgameRobot3).Append('\n');
        sb.Append("  AutoCellsBottom: ").Append(this.AutoCellsBottom).Append('\n');
        sb.Append("  AutoCellsOuter: ").Append(this.AutoCellsOuter).Append('\n');
        sb.Append("  AutoCellsInner: ").Append(this.AutoCellsInner).Append('\n');
        sb.Append("  TeleopCellsBottom: ").Append(this.TeleopCellsBottom).Append('\n');
        sb.Append("  TeleopCellsOuter: ").Append(this.TeleopCellsOuter).Append('\n');
        sb.Append("  TeleopCellsInner: ").Append(this.TeleopCellsInner).Append('\n');
        sb.Append("  Stage1Activated: ").Append(this.Stage1Activated).Append('\n');
        sb.Append("  Stage2Activated: ").Append(this.Stage2Activated).Append('\n');
        sb.Append("  Stage3Activated: ").Append(this.Stage3Activated).Append('\n');
        sb.Append("  Stage3TargetColor: ").Append(this.Stage3TargetColor).Append('\n');
        sb.Append("  EndgameRungIsLevel: ").Append(this.EndgameRungIsLevel).Append('\n');
        sb.Append("  AutoInitLinePoints: ").Append(this.AutoInitLinePoints).Append('\n');
        sb.Append("  AutoCellPoints: ").Append(this.AutoCellPoints).Append('\n');
        sb.Append("  AutoPoints: ").Append(this.AutoPoints).Append('\n');
        sb.Append("  TeleopCellPoints: ").Append(this.TeleopCellPoints).Append('\n');
        sb.Append("  ControlPanelPoints: ").Append(this.ControlPanelPoints).Append('\n');
        sb.Append("  EndgamePoints: ").Append(this.EndgamePoints).Append('\n');
        sb.Append("  TeleopPoints: ").Append(this.TeleopPoints).Append('\n');
        sb.Append("  ShieldOperationalRankingPoint: ").Append(this.ShieldOperationalRankingPoint).Append('\n');
        sb.Append("  ShieldEnergizedRankingPoint: ").Append(this.ShieldEnergizedRankingPoint).Append('\n');
        sb.Append("  TbaShieldEnergizedRankingPointFromFoul: ").Append(this.TbaShieldEnergizedRankingPointFromFoul).Append('\n');
        sb.Append("  TbaNumRobotsHanging: ").Append(this.TbaNumRobotsHanging).Append('\n');
        sb.Append("  FoulCount: ").Append(this.FoulCount).Append('\n');
        sb.Append("  TechFoulCount: ").Append(this.TechFoulCount).Append('\n');
        sb.Append("  AdjustPoints: ").Append(this.AdjustPoints).Append('\n');
        sb.Append("  FoulPoints: ").Append(this.FoulPoints).Append('\n');
        sb.Append("  Rp: ").Append(this.Rp).Append('\n');
        sb.Append("  TotalPoints: ").Append(this.TotalPoints).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.InitLineRobot1 is not null)
            {
                hashCode = (hashCode * 59) + this.InitLineRobot1.GetHashCode();
            }

            if (this.EndgameRobot1 is not null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot1.GetHashCode();
            }

            if (this.InitLineRobot2 is not null)
            {
                hashCode = (hashCode * 59) + this.InitLineRobot2.GetHashCode();
            }

            if (this.EndgameRobot2 is not null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot2.GetHashCode();
            }

            if (this.InitLineRobot3 is not null)
            {
                hashCode = (hashCode * 59) + this.InitLineRobot3.GetHashCode();
            }

            if (this.EndgameRobot3 is not null)
            {
                hashCode = (hashCode * 59) + this.EndgameRobot3.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.AutoCellsBottom.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoCellsOuter.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoCellsInner.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopCellsBottom.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopCellsOuter.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopCellsInner.GetHashCode();
            hashCode = (hashCode * 59) + this.Stage1Activated.GetHashCode();
            hashCode = (hashCode * 59) + this.Stage2Activated.GetHashCode();
            hashCode = (hashCode * 59) + this.Stage3Activated.GetHashCode();
            if (this.Stage3TargetColor is not null)
            {
                hashCode = (hashCode * 59) + this.Stage3TargetColor.GetHashCode();
            }

            if (this.EndgameRungIsLevel is not null)
            {
                hashCode = (hashCode * 59) + this.EndgameRungIsLevel.GetHashCode();
            }

            hashCode = (hashCode * 59) + this.AutoInitLinePoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoCellPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.AutoPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopCellPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.ControlPanelPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.EndgamePoints.GetHashCode();
            hashCode = (hashCode * 59) + this.TeleopPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.ShieldOperationalRankingPoint.GetHashCode();
            hashCode = (hashCode * 59) + this.ShieldEnergizedRankingPoint.GetHashCode();
            hashCode = (hashCode * 59) + this.TbaShieldEnergizedRankingPointFromFoul.GetHashCode();
            hashCode = (hashCode * 59) + this.TbaNumRobotsHanging.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.TechFoulCount.GetHashCode();
            hashCode = (hashCode * 59) + this.AdjustPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.FoulPoints.GetHashCode();
            hashCode = (hashCode * 59) + this.Rp.GetHashCode();
            hashCode = (hashCode * 59) + this.TotalPoints.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
