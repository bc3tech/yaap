/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TBAAPI.V3Client.Model;

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// Zebra
/// </summary>
[DataContract]
public partial record Zebra : IValidatableObject
{
    /// <summary>
    /// TBA match key with the format 'yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]', where 'yyyy' is the year, and 'EVENT_CODE' is the event code of the event, 'COMP_LEVEL' is (qm, ef, qf, sf, f), and 'MATCH_NUMBER' is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
    /// </summary>
    /// <value>TBA match key with the format 'yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]', where 'yyyy' is the year, and 'EVENT_CODE' is the event code of the event, 'COMP_LEVEL' is (qm, ef, qf, sf, f), and 'MATCH_NUMBER' is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.</value>
    [DataMember(Name = "key", EmitDefaultValue = false), JsonPropertyName("key")]
    public string? Key { get; set; }

    /// <summary>
    /// A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. 'times', all teams 'xs' and all teams 'ys' are guarenteed to be the same length.
    /// </summary>
    /// <value>A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. 'times', all teams 'xs' and all teams 'ys' are guarenteed to be the same length.</value>
    [DataMember(Name = "times", EmitDefaultValue = false), JsonPropertyName("times")]
    public IList<double>? Times { get; set; }

    /// <summary>
    /// Gets or Sets Alliances
    /// </summary>
    [DataMember(Name = "alliances", EmitDefaultValue = false), JsonPropertyName("alliances")]
    public ZebraAlliances? Alliances { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Zebra {\n");
        sb.Append("  Key: ").Append(this.Key).Append('\n');
        sb.Append("  Times: ").Append(this.Times).Append('\n');
        sb.Append("  Alliances: ").Append(this.Alliances).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonSerializer.Serialize(this, GetType());

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (this.Key is not null)
            {
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
            }

            if (this.Times is not null)
            {
                hashCode = (hashCode * 59) + this.Times.GetHashCode();
            }

            if (this.Alliances is not null)
            {
                hashCode = (hashCode * 59) + this.Alliances.GetHashCode();
            }

            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) => [];
}
